
EEPROM_Driver_ReadingApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00003080  000030f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002268  00000000  00000000  0000310c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b6e  00000000  00000000  00005374  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006022  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006192  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a62f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <main>
      7a:	0c 94 3e 18 	jmp	0x307c	; 0x307c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 07 18 	jmp	0x300e	; 0x300e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e6       	ldi	r26, 0x6E	; 110
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 07 18 	jmp	0x300e	; 0x300e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e6       	ldi	r24, 0x6E	; 110
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 17 18 	jmp	0x302e	; 0x302e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 33 18 	jmp	0x3066	; 0x3066 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_vidSetPinDir>:
#include "DIO_INT.h"
#include "DIO_PRIV.h"
#include "BIT_MATH.h"

void DIO_vidSetPinDir(u8 u8PortId,u8 u8PinId,u8 u8Dir)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03

	if((u8PortId<=PORTD) && (u8PinId<=PIN7))
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	08 f0       	brcs	.+2      	; 0xb58 <DIO_vidSetPinDir+0x22>
     b56:	ee c0       	rjmp	.+476    	; 0xd34 <DIO_vidSetPinDir+0x1fe>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	88 30       	cpi	r24, 0x08	; 8
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <DIO_vidSetPinDir+0x2a>
     b5e:	ea c0       	rjmp	.+468    	; 0xd34 <DIO_vidSetPinDir+0x1fe>
	{
		//law 3ayzen n set l pit direction
	if(u8Dir== INPUT)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	88 23       	and	r24, r24
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_vidSetPinDir+0x32>
     b66:	74 c0       	rjmp	.+232    	; 0xc50 <DIO_vidSetPinDir+0x11a>
		{
		switch (u8PortId)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	59 f1       	breq	.+86     	; 0xbd2 <DIO_vidSetPinDir+0x9c>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_vidSetPinDir+0x5a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	69 f0       	breq	.+26     	; 0xba8 <DIO_vidSetPinDir+0x72>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_vidSetPinDir+0x1fe>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	89 f1       	breq	.+98     	; 0xbfc <DIO_vidSetPinDir+0xc6>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <DIO_vidSetPinDir+0x70>
     ba4:	40 c0       	rjmp	.+128    	; 0xc26 <DIO_vidSetPinDir+0xf0>
     ba6:	c6 c0       	rjmp	.+396    	; 0xd34 <DIO_vidSetPinDir+0x1fe>
			{
				case PORTA:CLR_BIT(DDRA_reg,u8PinId);
     ba8:	aa e3       	ldi	r26, 0x3A	; 58
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ea e3       	ldi	r30, 0x3A	; 58
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	48 2f       	mov	r20, r24
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	02 2e       	mov	r0, r18
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <DIO_vidSetPinDir+0x90>
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	0a 94       	dec	r0
     bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <DIO_vidSetPinDir+0x8c>
     bca:	80 95       	com	r24
     bcc:	84 23       	and	r24, r20
     bce:	8c 93       	st	X, r24
     bd0:	b1 c0       	rjmp	.+354    	; 0xd34 <DIO_vidSetPinDir+0x1fe>
				break;
				case PORTB:CLR_BIT(DDRB_reg,u8PinId);
     bd2:	a7 e3       	ldi	r26, 0x37	; 55
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e7 e3       	ldi	r30, 0x37	; 55
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	48 2f       	mov	r20, r24
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 2e       	mov	r0, r18
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <DIO_vidSetPinDir+0xba>
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <DIO_vidSetPinDir+0xb6>
     bf4:	80 95       	com	r24
     bf6:	84 23       	and	r24, r20
     bf8:	8c 93       	st	X, r24
     bfa:	9c c0       	rjmp	.+312    	; 0xd34 <DIO_vidSetPinDir+0x1fe>
				break;
				case PORTC:CLR_BIT(DDRC_reg,u8PinId);
     bfc:	a4 e3       	ldi	r26, 0x34	; 52
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e4 e3       	ldi	r30, 0x34	; 52
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <DIO_vidSetPinDir+0xe4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <DIO_vidSetPinDir+0xe0>
     c1e:	80 95       	com	r24
     c20:	84 23       	and	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	87 c0       	rjmp	.+270    	; 0xd34 <DIO_vidSetPinDir+0x1fe>
				break;
				case PORTD:CLR_BIT(DDRD_reg,u8PinId);
     c26:	a1 e3       	ldi	r26, 0x31	; 49
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e1 e3       	ldi	r30, 0x31	; 49
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_vidSetPinDir+0x10e>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_vidSetPinDir+0x10a>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	72 c0       	rjmp	.+228    	; 0xd34 <DIO_vidSetPinDir+0x1fe>
				break;
			}
		}
	else if(u8Dir==OUTPUT)
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	8f 3f       	cpi	r24, 0xFF	; 255
     c54:	09 f0       	breq	.+2      	; 0xc58 <DIO_vidSetPinDir+0x122>
     c56:	6e c0       	rjmp	.+220    	; 0xd34 <DIO_vidSetPinDir+0x1fe>
			{
		switch (u8PortId)
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	3d 83       	std	Y+5, r19	; 0x05
     c60:	2c 83       	std	Y+4, r18	; 0x04
     c62:	8c 81       	ldd	r24, Y+4	; 0x04
     c64:	9d 81       	ldd	r25, Y+5	; 0x05
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	91 05       	cpc	r25, r1
     c6a:	49 f1       	breq	.+82     	; 0xcbe <DIO_vidSetPinDir+0x188>
     c6c:	2c 81       	ldd	r18, Y+4	; 0x04
     c6e:	3d 81       	ldd	r19, Y+5	; 0x05
     c70:	22 30       	cpi	r18, 0x02	; 2
     c72:	31 05       	cpc	r19, r1
     c74:	2c f4       	brge	.+10     	; 0xc80 <DIO_vidSetPinDir+0x14a>
     c76:	8c 81       	ldd	r24, Y+4	; 0x04
     c78:	9d 81       	ldd	r25, Y+5	; 0x05
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	61 f0       	breq	.+24     	; 0xc96 <DIO_vidSetPinDir+0x160>
     c7e:	5a c0       	rjmp	.+180    	; 0xd34 <DIO_vidSetPinDir+0x1fe>
     c80:	2c 81       	ldd	r18, Y+4	; 0x04
     c82:	3d 81       	ldd	r19, Y+5	; 0x05
     c84:	22 30       	cpi	r18, 0x02	; 2
     c86:	31 05       	cpc	r19, r1
     c88:	71 f1       	breq	.+92     	; 0xce6 <DIO_vidSetPinDir+0x1b0>
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	9d 81       	ldd	r25, Y+5	; 0x05
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	91 05       	cpc	r25, r1
     c92:	e9 f1       	breq	.+122    	; 0xd0e <DIO_vidSetPinDir+0x1d8>
     c94:	4f c0       	rjmp	.+158    	; 0xd34 <DIO_vidSetPinDir+0x1fe>
					{
				case PORTA:SET_BIT(DDRA_reg,u8PinId);
     c96:	aa e3       	ldi	r26, 0x3A	; 58
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	ea e3       	ldi	r30, 0x3A	; 58
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 2e       	mov	r0, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_vidSetPinDir+0x17e>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_vidSetPinDir+0x17a>
     cb8:	84 2b       	or	r24, r20
     cba:	8c 93       	st	X, r24
     cbc:	3b c0       	rjmp	.+118    	; 0xd34 <DIO_vidSetPinDir+0x1fe>
				break;
				case PORTB:SET_BIT(DDRB_reg,u8PinId);
     cbe:	a7 e3       	ldi	r26, 0x37	; 55
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e7 e3       	ldi	r30, 0x37	; 55
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	48 2f       	mov	r20, r24
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 2e       	mov	r0, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_vidSetPinDir+0x1a6>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_vidSetPinDir+0x1a2>
     ce0:	84 2b       	or	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	27 c0       	rjmp	.+78     	; 0xd34 <DIO_vidSetPinDir+0x1fe>
				break;
				case PORTC:SET_BIT(DDRC_reg,u8PinId);
     ce6:	a4 e3       	ldi	r26, 0x34	; 52
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e4 e3       	ldi	r30, 0x34	; 52
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_vidSetPinDir+0x1ce>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_vidSetPinDir+0x1ca>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	13 c0       	rjmp	.+38     	; 0xd34 <DIO_vidSetPinDir+0x1fe>
				break;
				case PORTD:SET_BIT(DDRD_reg,u8PinId);
     d0e:	a1 e3       	ldi	r26, 0x31	; 49
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e1 e3       	ldi	r30, 0x31	; 49
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_vidSetPinDir+0x1f6>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_vidSetPinDir+0x1f2>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
	else
			{
				//wrong input Direction
			}
		}
	}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_vidSetPinVal>:

void DIO_vidSetPinVal(u8 u8PortId, u8 u8PinId,u8 u8Val)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if((u8PortId<=PORTD) && (u8PinId<=PIN7))
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	08 f0       	brcs	.+2      	; 0xd68 <DIO_vidSetPinVal+0x22>
     d66:	ee c0       	rjmp	.+476    	; 0xf44 <DIO_vidSetPinVal+0x1fe>
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	88 30       	cpi	r24, 0x08	; 8
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <DIO_vidSetPinVal+0x2a>
     d6e:	ea c0       	rjmp	.+468    	; 0xf44 <DIO_vidSetPinVal+0x1fe>
		{
			//law 3ayzen n set l pit direction
		if(u8Val== HIGH)
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	8f 3f       	cpi	r24, 0xFF	; 255
     d74:	09 f0       	breq	.+2      	; 0xd78 <DIO_vidSetPinVal+0x32>
     d76:	6f c0       	rjmp	.+222    	; 0xe56 <DIO_vidSetPinVal+0x110>
			{
			switch (u8PortId)
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	3f 83       	std	Y+7, r19	; 0x07
     d80:	2e 83       	std	Y+6, r18	; 0x06
     d82:	8e 81       	ldd	r24, Y+6	; 0x06
     d84:	9f 81       	ldd	r25, Y+7	; 0x07
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	91 05       	cpc	r25, r1
     d8a:	49 f1       	breq	.+82     	; 0xdde <DIO_vidSetPinVal+0x98>
     d8c:	2e 81       	ldd	r18, Y+6	; 0x06
     d8e:	3f 81       	ldd	r19, Y+7	; 0x07
     d90:	22 30       	cpi	r18, 0x02	; 2
     d92:	31 05       	cpc	r19, r1
     d94:	2c f4       	brge	.+10     	; 0xda0 <DIO_vidSetPinVal+0x5a>
     d96:	8e 81       	ldd	r24, Y+6	; 0x06
     d98:	9f 81       	ldd	r25, Y+7	; 0x07
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	61 f0       	breq	.+24     	; 0xdb6 <DIO_vidSetPinVal+0x70>
     d9e:	d2 c0       	rjmp	.+420    	; 0xf44 <DIO_vidSetPinVal+0x1fe>
     da0:	2e 81       	ldd	r18, Y+6	; 0x06
     da2:	3f 81       	ldd	r19, Y+7	; 0x07
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	71 f1       	breq	.+92     	; 0xe06 <DIO_vidSetPinVal+0xc0>
     daa:	8e 81       	ldd	r24, Y+6	; 0x06
     dac:	9f 81       	ldd	r25, Y+7	; 0x07
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	91 05       	cpc	r25, r1
     db2:	e9 f1       	breq	.+122    	; 0xe2e <DIO_vidSetPinVal+0xe8>
     db4:	c7 c0       	rjmp	.+398    	; 0xf44 <DIO_vidSetPinVal+0x1fe>
				{
					case PORTA:SET_BIT(PORTA_reg,u8PinId);
     db6:	ab e3       	ldi	r26, 0x3B	; 59
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	eb e3       	ldi	r30, 0x3B	; 59
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 2e       	mov	r0, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <DIO_vidSetPinVal+0x8e>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	0a 94       	dec	r0
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <DIO_vidSetPinVal+0x8a>
     dd8:	84 2b       	or	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	b3 c0       	rjmp	.+358    	; 0xf44 <DIO_vidSetPinVal+0x1fe>
					break;
					case PORTB:SET_BIT(PORTB_reg,u8PinId);
     dde:	a8 e3       	ldi	r26, 0x38	; 56
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e8 e3       	ldi	r30, 0x38	; 56
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_vidSetPinVal+0xb6>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_vidSetPinVal+0xb2>
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	9f c0       	rjmp	.+318    	; 0xf44 <DIO_vidSetPinVal+0x1fe>
					break;
					case PORTC:SET_BIT(PORTC_reg,u8PinId);
     e06:	a5 e3       	ldi	r26, 0x35	; 53
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e5 e3       	ldi	r30, 0x35	; 53
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_vidSetPinVal+0xde>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_vidSetPinVal+0xda>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	8b c0       	rjmp	.+278    	; 0xf44 <DIO_vidSetPinVal+0x1fe>
					break;
					case PORTD:SET_BIT(PORTD_reg,u8PinId);
     e2e:	a2 e3       	ldi	r26, 0x32	; 50
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e2 e3       	ldi	r30, 0x32	; 50
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_vidSetPinVal+0x106>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_vidSetPinVal+0x102>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	77 c0       	rjmp	.+238    	; 0xf44 <DIO_vidSetPinVal+0x1fe>
					break;
				}
			}
		else if(u8Val==LOW)
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	88 23       	and	r24, r24
     e5a:	09 f0       	breq	.+2      	; 0xe5e <DIO_vidSetPinVal+0x118>
     e5c:	73 c0       	rjmp	.+230    	; 0xf44 <DIO_vidSetPinVal+0x1fe>
				{
			switch (u8PortId)
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	3d 83       	std	Y+5, r19	; 0x05
     e66:	2c 83       	std	Y+4, r18	; 0x04
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	91 05       	cpc	r25, r1
     e70:	59 f1       	breq	.+86     	; 0xec8 <DIO_vidSetPinVal+0x182>
     e72:	2c 81       	ldd	r18, Y+4	; 0x04
     e74:	3d 81       	ldd	r19, Y+5	; 0x05
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	2c f4       	brge	.+10     	; 0xe86 <DIO_vidSetPinVal+0x140>
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	9d 81       	ldd	r25, Y+5	; 0x05
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	69 f0       	breq	.+26     	; 0xe9e <DIO_vidSetPinVal+0x158>
     e84:	5f c0       	rjmp	.+190    	; 0xf44 <DIO_vidSetPinVal+0x1fe>
     e86:	2c 81       	ldd	r18, Y+4	; 0x04
     e88:	3d 81       	ldd	r19, Y+5	; 0x05
     e8a:	22 30       	cpi	r18, 0x02	; 2
     e8c:	31 05       	cpc	r19, r1
     e8e:	89 f1       	breq	.+98     	; 0xef2 <DIO_vidSetPinVal+0x1ac>
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	9d 81       	ldd	r25, Y+5	; 0x05
     e94:	83 30       	cpi	r24, 0x03	; 3
     e96:	91 05       	cpc	r25, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <DIO_vidSetPinVal+0x156>
     e9a:	40 c0       	rjmp	.+128    	; 0xf1c <DIO_vidSetPinVal+0x1d6>
     e9c:	53 c0       	rjmp	.+166    	; 0xf44 <DIO_vidSetPinVal+0x1fe>
					{
						case PORTA:CLR_BIT(PORTA_reg,u8PinId);
     e9e:	ab e3       	ldi	r26, 0x3B	; 59
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	eb e3       	ldi	r30, 0x3B	; 59
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_vidSetPinVal+0x176>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_vidSetPinVal+0x172>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	3e c0       	rjmp	.+124    	; 0xf44 <DIO_vidSetPinVal+0x1fe>
						break;
						case PORTB:CLR_BIT(PORTB_reg,u8PinId);
     ec8:	a8 e3       	ldi	r26, 0x38	; 56
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e8 e3       	ldi	r30, 0x38	; 56
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_vidSetPinVal+0x1a0>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_vidSetPinVal+0x19c>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	29 c0       	rjmp	.+82     	; 0xf44 <DIO_vidSetPinVal+0x1fe>
						break;
						case PORTC:CLR_BIT(PORTC_reg,u8PinId);
     ef2:	a5 e3       	ldi	r26, 0x35	; 53
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e5 e3       	ldi	r30, 0x35	; 53
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_vidSetPinVal+0x1ca>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_vidSetPinVal+0x1c6>
     f14:	80 95       	com	r24
     f16:	84 23       	and	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <DIO_vidSetPinVal+0x1fe>
						break;
						case PORTD:CLR_BIT(PORTD_reg,u8PinId);
     f1c:	a2 e3       	ldi	r26, 0x32	; 50
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e2 e3       	ldi	r30, 0x32	; 50
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_vidSetPinVal+0x1f4>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_vidSetPinVal+0x1f0>
     f3e:	80 95       	com	r24
     f40:	84 23       	and	r24, r20
     f42:	8c 93       	st	X, r24
		else
				{
					//wrong input Direction
				}
			}
}
     f44:	27 96       	adiw	r28, 0x07	; 7
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 u8PortId,u8 u8PinId)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <DIO_u8GetPinVal+0x6>
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <DIO_u8GetPinVal+0x8>
     f5e:	0f 92       	push	r0
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	8a 83       	std	Y+2, r24	; 0x02
     f66:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8PinVal=IN_UNDEF;
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	89 83       	std	Y+1, r24	; 0x01
	if((u8PortId<=PORTD) && (u8PinId<=PIN7))
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	84 30       	cpi	r24, 0x04	; 4
     f70:	08 f0       	brcs	.+2      	; 0xf74 <DIO_u8GetPinVal+0x1e>
     f72:	6c c0       	rjmp	.+216    	; 0x104c <DIO_u8GetPinVal+0xf6>
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	88 30       	cpi	r24, 0x08	; 8
     f78:	08 f0       	brcs	.+2      	; 0xf7c <DIO_u8GetPinVal+0x26>
     f7a:	68 c0       	rjmp	.+208    	; 0x104c <DIO_u8GetPinVal+0xf6>
		{

			switch (u8PortId)
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	3d 83       	std	Y+5, r19	; 0x05
     f84:	2c 83       	std	Y+4, r18	; 0x04
     f86:	4c 81       	ldd	r20, Y+4	; 0x04
     f88:	5d 81       	ldd	r21, Y+5	; 0x05
     f8a:	41 30       	cpi	r20, 0x01	; 1
     f8c:	51 05       	cpc	r21, r1
     f8e:	41 f1       	breq	.+80     	; 0xfe0 <DIO_u8GetPinVal+0x8a>
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	82 30       	cpi	r24, 0x02	; 2
     f96:	91 05       	cpc	r25, r1
     f98:	34 f4       	brge	.+12     	; 0xfa6 <DIO_u8GetPinVal+0x50>
     f9a:	2c 81       	ldd	r18, Y+4	; 0x04
     f9c:	3d 81       	ldd	r19, Y+5	; 0x05
     f9e:	21 15       	cp	r18, r1
     fa0:	31 05       	cpc	r19, r1
     fa2:	61 f0       	breq	.+24     	; 0xfbc <DIO_u8GetPinVal+0x66>
     fa4:	55 c0       	rjmp	.+170    	; 0x1050 <DIO_u8GetPinVal+0xfa>
     fa6:	4c 81       	ldd	r20, Y+4	; 0x04
     fa8:	5d 81       	ldd	r21, Y+5	; 0x05
     faa:	42 30       	cpi	r20, 0x02	; 2
     fac:	51 05       	cpc	r21, r1
     fae:	51 f1       	breq	.+84     	; 0x1004 <DIO_u8GetPinVal+0xae>
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	9d 81       	ldd	r25, Y+5	; 0x05
     fb4:	83 30       	cpi	r24, 0x03	; 3
     fb6:	91 05       	cpc	r25, r1
     fb8:	b9 f1       	breq	.+110    	; 0x1028 <DIO_u8GetPinVal+0xd2>
     fba:	4a c0       	rjmp	.+148    	; 0x1050 <DIO_u8GetPinVal+0xfa>
				{
					case PORTA:
						u8PinVal=GET_BIT(PINA_reg,u8PinId);
     fbc:	e9 e3       	ldi	r30, 0x39	; 57
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	a9 01       	movw	r20, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_u8GetPinVal+0x7e>
     fd0:	55 95       	asr	r21
     fd2:	47 95       	ror	r20
     fd4:	8a 95       	dec	r24
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_u8GetPinVal+0x7a>
     fd8:	ca 01       	movw	r24, r20
     fda:	81 70       	andi	r24, 0x01	; 1
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	38 c0       	rjmp	.+112    	; 0x1050 <DIO_u8GetPinVal+0xfa>
					break;
					case PORTB:
						u8PinVal=GET_BIT(PINB_reg,u8PinId);
     fe0:	e6 e3       	ldi	r30, 0x36	; 54
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	a9 01       	movw	r20, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_u8GetPinVal+0xa2>
     ff4:	55 95       	asr	r21
     ff6:	47 95       	ror	r20
     ff8:	8a 95       	dec	r24
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_u8GetPinVal+0x9e>
     ffc:	ca 01       	movw	r24, r20
     ffe:	81 70       	andi	r24, 0x01	; 1
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	26 c0       	rjmp	.+76     	; 0x1050 <DIO_u8GetPinVal+0xfa>

					break;
					case PORTC:
						u8PinVal=GET_BIT(PINC_reg,u8PinId);
    1004:	e3 e3       	ldi	r30, 0x33	; 51
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a9 01       	movw	r20, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_u8GetPinVal+0xc6>
    1018:	55 95       	asr	r21
    101a:	47 95       	ror	r20
    101c:	8a 95       	dec	r24
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_u8GetPinVal+0xc2>
    1020:	ca 01       	movw	r24, r20
    1022:	81 70       	andi	r24, 0x01	; 1
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <DIO_u8GetPinVal+0xfa>

					break;
					case PORTD:
						u8PinVal=GET_BIT(PIND_reg,u8PinId);
    1028:	e0 e3       	ldi	r30, 0x30	; 48
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	a9 01       	movw	r20, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_u8GetPinVal+0xea>
    103c:	55 95       	asr	r21
    103e:	47 95       	ror	r20
    1040:	8a 95       	dec	r24
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_u8GetPinVal+0xe6>
    1044:	ca 01       	movw	r24, r20
    1046:	81 70       	andi	r24, 0x01	; 1
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_u8GetPinVal+0xfa>
			}

		else
				{
					//wrong input
				u8PinVal=IN_UNDEF;
    104c:	8f ef       	ldi	r24, 0xFF	; 255
    104e:	89 83       	std	Y+1, r24	; 0x01
				}
	return u8PinVal;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <DIO_vidTogglePin>:

void DIO_vidTogglePin(u8 u8PortId,u8 u8PinId)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	00 d0       	rcall	.+0      	; 0x1068 <DIO_vidTogglePin+0x6>
    1068:	00 d0       	rcall	.+0      	; 0x106a <DIO_vidTogglePin+0x8>
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	89 83       	std	Y+1, r24	; 0x01
    1070:	6a 83       	std	Y+2, r22	; 0x02
	if((u8PortId<=PORTD) && (u8PinId<=PIN7))
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	84 30       	cpi	r24, 0x04	; 4
    1076:	08 f0       	brcs	.+2      	; 0x107a <DIO_vidTogglePin+0x18>
    1078:	72 c0       	rjmp	.+228    	; 0x115e <DIO_vidTogglePin+0xfc>
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	88 30       	cpi	r24, 0x08	; 8
    107e:	08 f0       	brcs	.+2      	; 0x1082 <DIO_vidTogglePin+0x20>
    1080:	6e c0       	rjmp	.+220    	; 0x115e <DIO_vidTogglePin+0xfc>
			{

				switch (u8PortId)//we need only to toggle port 3shan kda m7tag a3ml output 3ala PORT
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	3c 83       	std	Y+4, r19	; 0x04
    108a:	2b 83       	std	Y+3, r18	; 0x03
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	91 05       	cpc	r25, r1
    1094:	49 f1       	breq	.+82     	; 0x10e8 <DIO_vidTogglePin+0x86>
    1096:	2b 81       	ldd	r18, Y+3	; 0x03
    1098:	3c 81       	ldd	r19, Y+4	; 0x04
    109a:	22 30       	cpi	r18, 0x02	; 2
    109c:	31 05       	cpc	r19, r1
    109e:	2c f4       	brge	.+10     	; 0x10aa <DIO_vidTogglePin+0x48>
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	61 f0       	breq	.+24     	; 0x10c0 <DIO_vidTogglePin+0x5e>
    10a8:	5a c0       	rjmp	.+180    	; 0x115e <DIO_vidTogglePin+0xfc>
    10aa:	2b 81       	ldd	r18, Y+3	; 0x03
    10ac:	3c 81       	ldd	r19, Y+4	; 0x04
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	71 f1       	breq	.+92     	; 0x1110 <DIO_vidTogglePin+0xae>
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	83 30       	cpi	r24, 0x03	; 3
    10ba:	91 05       	cpc	r25, r1
    10bc:	e9 f1       	breq	.+122    	; 0x1138 <DIO_vidTogglePin+0xd6>
    10be:	4f c0       	rjmp	.+158    	; 0x115e <DIO_vidTogglePin+0xfc>
					{
						case PORTA:
						TOG_BIT(PORTA_reg,u8PinId);
    10c0:	ab e3       	ldi	r26, 0x3B	; 59
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	eb e3       	ldi	r30, 0x3B	; 59
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_vidTogglePin+0x7c>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_vidTogglePin+0x78>
    10e2:	84 27       	eor	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	3b c0       	rjmp	.+118    	; 0x115e <DIO_vidTogglePin+0xfc>
						break;
						case PORTB:
							TOG_BIT(PORTB_reg,u8PinId);
    10e8:	a8 e3       	ldi	r26, 0x38	; 56
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e8 e3       	ldi	r30, 0x38	; 56
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_vidTogglePin+0xa4>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_vidTogglePin+0xa0>
    110a:	84 27       	eor	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	27 c0       	rjmp	.+78     	; 0x115e <DIO_vidTogglePin+0xfc>
						break;
						case PORTC:
							TOG_BIT(PORTC_reg,u8PinId);
    1110:	a5 e3       	ldi	r26, 0x35	; 53
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e5 e3       	ldi	r30, 0x35	; 53
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_vidTogglePin+0xcc>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_vidTogglePin+0xc8>
    1132:	84 27       	eor	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	13 c0       	rjmp	.+38     	; 0x115e <DIO_vidTogglePin+0xfc>
						break;
						case PORTD:
							TOG_BIT(PORTD_reg,u8PinId);
    1138:	a2 e3       	ldi	r26, 0x32	; 50
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e2 e3       	ldi	r30, 0x32	; 50
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_vidTogglePin+0xf4>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_vidTogglePin+0xf0>
    115a:	84 27       	eor	r24, r20
    115c:	8c 93       	st	X, r24
					{
						//wrong input Direction
					}


}
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <DIO_vidEnablePullUpRes>:

void DIO_vidEnablePullUpRes(u8 u8PortId,u8 u8PinId)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <DIO_vidEnablePullUpRes+0x6>
    1172:	00 d0       	rcall	.+0      	; 0x1174 <DIO_vidEnablePullUpRes+0x8>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	6a 83       	std	Y+2, r22	; 0x02
	if((u8PortId<=PORTD) && (u8PinId<=PIN7))
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	84 30       	cpi	r24, 0x04	; 4
    1180:	08 f0       	brcs	.+2      	; 0x1184 <DIO_vidEnablePullUpRes+0x18>
    1182:	72 c0       	rjmp	.+228    	; 0x1268 <DIO_vidEnablePullUpRes+0xfc>
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	88 30       	cpi	r24, 0x08	; 8
    1188:	08 f0       	brcs	.+2      	; 0x118c <DIO_vidEnablePullUpRes+0x20>
    118a:	6e c0       	rjmp	.+220    	; 0x1268 <DIO_vidEnablePullUpRes+0xfc>
			{
				//law 3ayzen n set l pit direction

				switch (u8PortId)
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3c 83       	std	Y+4, r19	; 0x04
    1194:	2b 83       	std	Y+3, r18	; 0x03
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	49 f1       	breq	.+82     	; 0x11f2 <DIO_vidEnablePullUpRes+0x86>
    11a0:	2b 81       	ldd	r18, Y+3	; 0x03
    11a2:	3c 81       	ldd	r19, Y+4	; 0x04
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <DIO_vidEnablePullUpRes+0x48>
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	61 f0       	breq	.+24     	; 0x11ca <DIO_vidEnablePullUpRes+0x5e>
    11b2:	5a c0       	rjmp	.+180    	; 0x1268 <DIO_vidEnablePullUpRes+0xfc>
    11b4:	2b 81       	ldd	r18, Y+3	; 0x03
    11b6:	3c 81       	ldd	r19, Y+4	; 0x04
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	71 f1       	breq	.+92     	; 0x121a <DIO_vidEnablePullUpRes+0xae>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	83 30       	cpi	r24, 0x03	; 3
    11c4:	91 05       	cpc	r25, r1
    11c6:	e9 f1       	breq	.+122    	; 0x1242 <DIO_vidEnablePullUpRes+0xd6>
    11c8:	4f c0       	rjmp	.+158    	; 0x1268 <DIO_vidEnablePullUpRes+0xfc>
					{
						case PORTA:SET_BIT(PORTA_reg,u8PinId);
    11ca:	ab e3       	ldi	r26, 0x3B	; 59
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	eb e3       	ldi	r30, 0x3B	; 59
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_vidEnablePullUpRes+0x7c>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_vidEnablePullUpRes+0x78>
    11ec:	84 2b       	or	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	3b c0       	rjmp	.+118    	; 0x1268 <DIO_vidEnablePullUpRes+0xfc>
						break;
						case PORTB:SET_BIT(PORTB_reg,u8PinId);
    11f2:	a8 e3       	ldi	r26, 0x38	; 56
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e8 e3       	ldi	r30, 0x38	; 56
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_vidEnablePullUpRes+0xa4>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_vidEnablePullUpRes+0xa0>
    1214:	84 2b       	or	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	27 c0       	rjmp	.+78     	; 0x1268 <DIO_vidEnablePullUpRes+0xfc>
						break;
						case PORTC:SET_BIT(PORTC_reg,u8PinId);
    121a:	a5 e3       	ldi	r26, 0x35	; 53
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e3       	ldi	r30, 0x35	; 53
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_vidEnablePullUpRes+0xcc>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_vidEnablePullUpRes+0xc8>
    123c:	84 2b       	or	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	13 c0       	rjmp	.+38     	; 0x1268 <DIO_vidEnablePullUpRes+0xfc>
						break;
						case PORTD:SET_BIT(PORTD_reg,u8PinId);
    1242:	a2 e3       	ldi	r26, 0x32	; 50
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e2 e3       	ldi	r30, 0x32	; 50
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_vidEnablePullUpRes+0xf4>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_vidEnablePullUpRes+0xf0>
    1264:	84 2b       	or	r24, r20
    1266:	8c 93       	st	X, r24
						break;
					}
			}
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <DIO_vidSetPortVal>:

void DIO_vidSetPortVal(u8 u8PortId,u8 u8Val)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	00 d0       	rcall	.+0      	; 0x127c <DIO_vidSetPortVal+0x6>
    127c:	00 d0       	rcall	.+0      	; 0x127e <DIO_vidSetPortVal+0x8>
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	6a 83       	std	Y+2, r22	; 0x02


		switch (u8PortId)
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3c 83       	std	Y+4, r19	; 0x04
    128e:	2b 83       	std	Y+3, r18	; 0x03
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	91 05       	cpc	r25, r1
    1298:	d1 f0       	breq	.+52     	; 0x12ce <DIO_vidSetPortVal+0x58>
    129a:	2b 81       	ldd	r18, Y+3	; 0x03
    129c:	3c 81       	ldd	r19, Y+4	; 0x04
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	2c f4       	brge	.+10     	; 0x12ae <DIO_vidSetPortVal+0x38>
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	61 f0       	breq	.+24     	; 0x12c4 <DIO_vidSetPortVal+0x4e>
    12ac:	1e c0       	rjmp	.+60     	; 0x12ea <DIO_vidSetPortVal+0x74>
    12ae:	2b 81       	ldd	r18, Y+3	; 0x03
    12b0:	3c 81       	ldd	r19, Y+4	; 0x04
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	81 f0       	breq	.+32     	; 0x12d8 <DIO_vidSetPortVal+0x62>
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	83 30       	cpi	r24, 0x03	; 3
    12be:	91 05       	cpc	r25, r1
    12c0:	81 f0       	breq	.+32     	; 0x12e2 <DIO_vidSetPortVal+0x6c>
    12c2:	13 c0       	rjmp	.+38     	; 0x12ea <DIO_vidSetPortVal+0x74>
				{
					case PORTA:
						PORTA_reg=u8Val;
    12c4:	eb e3       	ldi	r30, 0x3B	; 59
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	80 83       	st	Z, r24
    12cc:	0e c0       	rjmp	.+28     	; 0x12ea <DIO_vidSetPortVal+0x74>
					break;
					case PORTB:
						PORTB_reg=u8Val;
    12ce:	e8 e3       	ldi	r30, 0x38	; 56
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	80 83       	st	Z, r24
    12d6:	09 c0       	rjmp	.+18     	; 0x12ea <DIO_vidSetPortVal+0x74>
					break;
					case PORTC:
						PORTC_reg=u8Val;
    12d8:	e5 e3       	ldi	r30, 0x35	; 53
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	80 83       	st	Z, r24
    12e0:	04 c0       	rjmp	.+8      	; 0x12ea <DIO_vidSetPortVal+0x74>
					break;
					case PORTD:
						PORTD_reg=u8Val;
    12e2:	e2 e3       	ldi	r30, 0x32	; 50
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	80 83       	st	Z, r24
					default: /*wrong POrtIdvalue*/
					  break;
				}


}
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <DIO_vidSetPortDir>:

void DIO_vidSetPortDir(u8 u8PortId,u8 u8Dir)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <DIO_vidSetPortDir+0x6>
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <DIO_vidSetPortDir+0x8>
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	6a 83       	std	Y+2, r22	; 0x02


			switch (u8PortId)
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	3c 83       	std	Y+4, r19	; 0x04
    1310:	2b 83       	std	Y+3, r18	; 0x03
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	91 05       	cpc	r25, r1
    131a:	d1 f0       	breq	.+52     	; 0x1350 <DIO_vidSetPortDir+0x58>
    131c:	2b 81       	ldd	r18, Y+3	; 0x03
    131e:	3c 81       	ldd	r19, Y+4	; 0x04
    1320:	22 30       	cpi	r18, 0x02	; 2
    1322:	31 05       	cpc	r19, r1
    1324:	2c f4       	brge	.+10     	; 0x1330 <DIO_vidSetPortDir+0x38>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	61 f0       	breq	.+24     	; 0x1346 <DIO_vidSetPortDir+0x4e>
    132e:	1e c0       	rjmp	.+60     	; 0x136c <DIO_vidSetPortDir+0x74>
    1330:	2b 81       	ldd	r18, Y+3	; 0x03
    1332:	3c 81       	ldd	r19, Y+4	; 0x04
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	81 f0       	breq	.+32     	; 0x135a <DIO_vidSetPortDir+0x62>
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	83 30       	cpi	r24, 0x03	; 3
    1340:	91 05       	cpc	r25, r1
    1342:	81 f0       	breq	.+32     	; 0x1364 <DIO_vidSetPortDir+0x6c>
    1344:	13 c0       	rjmp	.+38     	; 0x136c <DIO_vidSetPortDir+0x74>
					{
						case PORTA:
							DDRA_reg=u8Dir;
    1346:	ea e3       	ldi	r30, 0x3A	; 58
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	80 83       	st	Z, r24
    134e:	0e c0       	rjmp	.+28     	; 0x136c <DIO_vidSetPortDir+0x74>
						break;
						case PORTB:
							DDRB_reg=u8Dir;
    1350:	e7 e3       	ldi	r30, 0x37	; 55
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	80 83       	st	Z, r24
    1358:	09 c0       	rjmp	.+18     	; 0x136c <DIO_vidSetPortDir+0x74>
						break;
						case PORTC:
							DDRC_reg=u8Dir;
    135a:	e4 e3       	ldi	r30, 0x34	; 52
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	80 83       	st	Z, r24
    1362:	04 c0       	rjmp	.+8      	; 0x136c <DIO_vidSetPortDir+0x74>
						break;
						case PORTD:
							DDRD_reg=u8Dir;
    1364:	e1 e3       	ldi	r30, 0x31	; 49
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	80 83       	st	Z, r24
						default: /*wrong POrtIdvalue*/
							break;
					}


}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <Eeprom_VidInit>:
#include "Eeprom_INT.h"
#include "Eeprom_Cfg.h"
#include "Eeprom_Priv.h"

void Eeprom_VidInit(void)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
	/*Intialize I2c*/
	I2c_VidInit();
    1382:	0e 94 75 0a 	call	0x14ea	; 0x14ea <I2c_VidInit>
}
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <Eeprom_u8WriteByte>:

u8 Eeprom_u8WriteByte(u8 DeviceId, u16 Location, u8 Byte)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <Eeprom_u8WriteByte+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <Eeprom_u8WriteByte+0x8>
    1394:	00 d0       	rcall	.+0      	; 0x1396 <Eeprom_u8WriteByte+0xa>
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	8a 83       	std	Y+2, r24	; 0x02
    139c:	7c 83       	std	Y+4, r23	; 0x04
    139e:	6b 83       	std	Y+3, r22	; 0x03
    13a0:	4d 83       	std	Y+5, r20	; 0x05
	 * 8- Check status
	 * 9- Send Stop
	 *
	 ***********************************************/
	 u8 SLA;
	 if(DeviceId==0)
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	88 23       	and	r24, r24
    13a6:	41 f4       	brne	.+16     	; 0x13b8 <Eeprom_u8WriteByte+0x2c>
	 {

		SLA=EEPROM_u8DEVICE_ADDRESS_0 | ((Location>>8)<<1);
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	89 2f       	mov	r24, r25
    13ae:	99 27       	eor	r25, r25
    13b0:	88 0f       	add	r24, r24
    13b2:	80 6a       	ori	r24, 0xA0	; 160
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	0a c0       	rjmp	.+20     	; 0x13cc <Eeprom_u8WriteByte+0x40>

	 }
	 else if(DeviceId==1)
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	39 f4       	brne	.+14     	; 0x13cc <Eeprom_u8WriteByte+0x40>
	 {

		SLA=EEPROM_u8DEVICE_ADDRESS_1 | ((Location>>8)<<1);
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	89 2f       	mov	r24, r25
    13c4:	99 27       	eor	r25, r25
    13c6:	88 0f       	add	r24, r24
    13c8:	8b 6a       	ori	r24, 0xAB	; 171
    13ca:	89 83       	std	Y+1, r24	; 0x01
	 }

	 	 I2c_VidSendStart();
    13cc:	0e 94 a0 0a 	call	0x1540	; 0x1540 <I2c_VidSendStart>
	 	 if(I2c_u8CheckStatus(0x08)==1)
    13d0:	88 e0       	ldi	r24, 0x08	; 8
    13d2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <I2c_u8CheckStatus>
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	e9 f4       	brne	.+58     	; 0x1414 <Eeprom_u8WriteByte+0x88>
	 	 {
	 		 I2c_VidSendSlaveAddress(SLA);
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	0e 94 bb 0a 	call	0x1576	; 0x1576 <I2c_VidSendSlaveAddress>

	 		if(I2c_u8CheckStatus(0x18)==1)
    13e0:	88 e1       	ldi	r24, 0x18	; 24
    13e2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <I2c_u8CheckStatus>
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	a9 f4       	brne	.+42     	; 0x1414 <Eeprom_u8WriteByte+0x88>
	 		{
	 			I2c_VidSendData((u8)Location);//CAsting u16 values fa hya5od least 8 bits
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <I2c_VidSendData>

	 			if(I2c_u8CheckStatus(0x28)==1)
    13f0:	88 e2       	ldi	r24, 0x28	; 40
    13f2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <I2c_u8CheckStatus>
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	69 f4       	brne	.+26     	; 0x1414 <Eeprom_u8WriteByte+0x88>
	 			{
	 				I2c_VidSendData(Byte);
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <I2c_VidSendData>

	 				if(I2c_u8CheckStatus(0x28)==1)
    1400:	88 e2       	ldi	r24, 0x28	; 40
    1402:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <I2c_u8CheckStatus>
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	29 f4       	brne	.+10     	; 0x1414 <Eeprom_u8WriteByte+0x88>
	 				{
	 					I2c_VidSendStop();
    140a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <I2c_VidSendStop>
	 					return 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	8e 83       	std	Y+6, r24	; 0x06
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <Eeprom_u8WriteByte+0x8a>
	 				}
	 			}
	 		}
	 	 }

	 	 return 0;
    1414:	1e 82       	std	Y+6, r1	; 0x06
    1416:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1418:	26 96       	adiw	r28, 0x06	; 6
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <Eeprom_u8ReadByte>:



u8 Eeprom_u8ReadByte(u8 DeviceId, u16 Location, u8* pByte)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	27 97       	sbiw	r28, 0x07	; 7
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	7c 83       	std	Y+4, r23	; 0x04
    1442:	6b 83       	std	Y+3, r22	; 0x03
    1444:	5e 83       	std	Y+6, r21	; 0x06
    1446:	4d 83       	std	Y+5, r20	; 0x05
		 * 11-Read the recevied byte
		 * 13- Send Stop
		 *
		 ***********************************************/
	 u8 SLA;
	 if(DeviceId==0)
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	88 23       	and	r24, r24
    144c:	41 f4       	brne	.+16     	; 0x145e <Eeprom_u8ReadByte+0x34>
	 {

		SLA=EEPROM_u8DEVICE_ADDRESS_0 | ((Location>>8)<<1);
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	89 2f       	mov	r24, r25
    1454:	99 27       	eor	r25, r25
    1456:	88 0f       	add	r24, r24
    1458:	80 6a       	ori	r24, 0xA0	; 160
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	0a c0       	rjmp	.+20     	; 0x1472 <Eeprom_u8ReadByte+0x48>

	 }
	 else if(DeviceId==1)
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	39 f4       	brne	.+14     	; 0x1472 <Eeprom_u8ReadByte+0x48>
	 {

		SLA=EEPROM_u8DEVICE_ADDRESS_1 | ((Location>>8)<<1);
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	89 2f       	mov	r24, r25
    146a:	99 27       	eor	r25, r25
    146c:	88 0f       	add	r24, r24
    146e:	8b 6a       	ori	r24, 0xAB	; 171
    1470:	89 83       	std	Y+1, r24	; 0x01
	 }

	 	 I2c_VidSendStart();
    1472:	0e 94 a0 0a 	call	0x1540	; 0x1540 <I2c_VidSendStart>
	 	 if(I2c_u8CheckStatus(0x08)==1)
    1476:	88 e0       	ldi	r24, 0x08	; 8
    1478:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <I2c_u8CheckStatus>
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	51 f5       	brne	.+84     	; 0x14d4 <Eeprom_u8ReadByte+0xaa>
	 	 {
	 		 I2c_VidSendSlaveAddress(SLA);
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	0e 94 bb 0a 	call	0x1576	; 0x1576 <I2c_VidSendSlaveAddress>

	 		if(I2c_u8CheckStatus(0x18)==1)
    1486:	88 e1       	ldi	r24, 0x18	; 24
    1488:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <I2c_u8CheckStatus>
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	11 f5       	brne	.+68     	; 0x14d4 <Eeprom_u8ReadByte+0xaa>
	 		{
	 			I2c_VidSendData((u8)Location);//Casting u16 values fa hya5od least 8 bits
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <I2c_VidSendData>

	 			if(I2c_u8CheckStatus(0x28)==1)
    1496:	88 e2       	ldi	r24, 0x28	; 40
    1498:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <I2c_u8CheckStatus>
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	d1 f4       	brne	.+52     	; 0x14d4 <Eeprom_u8ReadByte+0xaa>
	 			{
	 				I2c_VidSendStart();
    14a0:	0e 94 a0 0a 	call	0x1540	; 0x1540 <I2c_VidSendStart>

	 				if(I2c_u8CheckStatus(0x10)==1)
    14a4:	80 e1       	ldi	r24, 0x10	; 16
    14a6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <I2c_u8CheckStatus>
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	99 f4       	brne	.+38     	; 0x14d4 <Eeprom_u8ReadByte+0xaa>
	 				{
	 					I2c_VidSendSlaveAddress(SLA | 0x01);//Set Slave address to do Read Operation
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	81 60       	ori	r24, 0x01	; 1
    14b2:	0e 94 bb 0a 	call	0x1576	; 0x1576 <I2c_VidSendSlaveAddress>

	 					if(I2c_u8CheckStatus(0x40)==1)
    14b6:	80 e4       	ldi	r24, 0x40	; 64
    14b8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <I2c_u8CheckStatus>
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	51 f4       	brne	.+20     	; 0x14d4 <Eeprom_u8ReadByte+0xaa>
	 					{
	 						*pByte=I2c_u8ReceiveData();
    14c0:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <I2c_u8ReceiveData>
    14c4:	ed 81       	ldd	r30, Y+5	; 0x05
    14c6:	fe 81       	ldd	r31, Y+6	; 0x06
    14c8:	80 83       	st	Z, r24
	 						I2c_VidSendStop();
    14ca:	0e 94 b0 0a 	call	0x1560	; 0x1560 <I2c_VidSendStop>
	 						return 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	8f 83       	std	Y+7, r24	; 0x07
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <Eeprom_u8ReadByte+0xac>
	 				}
	 			}
	 		}
	 	 }

	 	 return 0;
    14d4:	1f 82       	std	Y+7, r1	; 0x07
    14d6:	8f 81       	ldd	r24, Y+7	; 0x07
}
    14d8:	27 96       	adiw	r28, 0x07	; 7
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <I2c_VidInit>:
#include "I2C_Cfg.h"
#include "I2c_Priv.h"


void I2c_VidInit(void)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
	/*Enable I2c*/
	SET_BIT(TWCR_reg,TWEN);
    14f2:	a6 e5       	ldi	r26, 0x56	; 86
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e6 e5       	ldi	r30, 0x56	; 86
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	84 60       	ori	r24, 0x04	; 4
    14fe:	8c 93       	st	X, r24

	/*Enable REceiver acknowledge*/
	SET_BIT(TWCR_reg,TWEA);
    1500:	a6 e5       	ldi	r26, 0x56	; 86
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e6 e5       	ldi	r30, 0x56	; 86
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	80 64       	ori	r24, 0x40	; 64
    150c:	8c 93       	st	X, r24

	/*SCL=Fcpu/(16+(2xTWBRx4^TWPS))=250 khz*/
	TWBR_reg=2;
    150e:	e0 e2       	ldi	r30, 0x20	; 32
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	80 83       	st	Z, r24
	CLR_BIT(TWSR_reg,1);
    1516:	a1 e2       	ldi	r26, 0x21	; 33
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e1 e2       	ldi	r30, 0x21	; 33
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8d 7f       	andi	r24, 0xFD	; 253
    1522:	8c 93       	st	X, r24
	CLR_BIT(TWSR_reg,0);
    1524:	a1 e2       	ldi	r26, 0x21	; 33
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e1 e2       	ldi	r30, 0x21	; 33
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8e 7f       	andi	r24, 0xFE	; 254
    1530:	8c 93       	st	X, r24

	/* Device's Own address = 1 and disable General call*/
	TWAR_reg=2; //0b00000010
    1532:	e2 e2       	ldi	r30, 0x22	; 34
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	80 83       	st	Z, r24


}
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <I2c_VidSendStart>:

void I2c_VidSendStart(void)
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
	/*Send Start Condition & Clear flag*/
	TWCR_reg= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1548:	e6 e5       	ldi	r30, 0x56	; 86
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	84 ea       	ldi	r24, 0xA4	; 164
    154e:	80 83       	st	Z, r24

	/*wait till this job done*/
	while(GET_BIT(TWCR_reg,7)==0);
    1550:	e6 e5       	ldi	r30, 0x56	; 86
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	88 23       	and	r24, r24
    1558:	dc f7       	brge	.-10     	; 0x1550 <I2c_VidSendStart+0x10>

}
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <I2c_VidSendStop>:

void I2c_VidSendStop(void)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62

	/*Send Stop Condition & Clear flag*/
		TWCR_reg= (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    1568:	e6 e5       	ldi	r30, 0x56	; 86
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	84 e9       	ldi	r24, 0x94	; 148
    156e:	80 83       	st	Z, r24

}
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <I2c_VidSendSlaveAddress>:
void I2c_VidSendSlaveAddress(u8 SlaveAddress_W_R)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	0f 92       	push	r0
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	89 83       	std	Y+1, r24	; 0x01
	/*Load Slave Address in TWDR*/
	TWDR_reg=SlaveAddress_W_R;
    1582:	e3 e2       	ldi	r30, 0x23	; 35
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	80 83       	st	Z, r24

	/*Clear flag to start the next job*/
	TWCR_reg= (1<<TWINT) | (1<<TWEN);
    158a:	e6 e5       	ldi	r30, 0x56	; 86
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	84 e8       	ldi	r24, 0x84	; 132
    1590:	80 83       	st	Z, r24

	/*wait till this job done*/
		while(GET_BIT(TWCR_reg,7)==0);
    1592:	e6 e5       	ldi	r30, 0x56	; 86
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	88 23       	and	r24, r24
    159a:	dc f7       	brge	.-10     	; 0x1592 <I2c_VidSendSlaveAddress+0x1c>
}
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <I2c_VidSendData>:

void I2c_VidSendData(u8 Data)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	0f 92       	push	r0
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	89 83       	std	Y+1, r24	; 0x01
	/*Load Data in TWDR*/
		TWDR_reg=Data;
    15b0:	e3 e2       	ldi	r30, 0x23	; 35
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	80 83       	st	Z, r24

		/*Clear flag to start the next job*/
		TWCR_reg= (1<<TWINT) | (1<<TWEN);
    15b8:	e6 e5       	ldi	r30, 0x56	; 86
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	84 e8       	ldi	r24, 0x84	; 132
    15be:	80 83       	st	Z, r24

		/*wait till this job done*/
		while(GET_BIT(TWCR_reg,7)==0);
    15c0:	e6 e5       	ldi	r30, 0x56	; 86
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 23       	and	r24, r24
    15c8:	dc f7       	brge	.-10     	; 0x15c0 <I2c_VidSendData+0x1c>
}
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <I2c_u8ReceiveData>:
u8 I2c_u8ReceiveData(void)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62

	/*Clear flag to start the next job*/
		TWCR_reg= (1<<TWINT) | (1<<TWEN);
    15da:	e6 e5       	ldi	r30, 0x56	; 86
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	84 e8       	ldi	r24, 0x84	; 132
    15e0:	80 83       	st	Z, r24

	/*wait till this job done*/
		while(GET_BIT(TWCR_reg,7)==0);
    15e2:	e6 e5       	ldi	r30, 0x56	; 86
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	88 23       	and	r24, r24
    15ea:	dc f7       	brge	.-10     	; 0x15e2 <I2c_u8ReceiveData+0x10>

	/*Return the received data*/
		return TWDR_reg;
    15ec:	e3 e2       	ldi	r30, 0x23	; 35
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z

}
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <I2c_u8CheckStatus>:

u8 I2c_u8CheckStatus(u8 ExpectedStatus)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <I2c_u8CheckStatus+0x6>
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	89 83       	std	Y+1, r24	; 0x01
	if(ExpectedStatus == (TWSR_reg & 0xF8))
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	e1 e2       	ldi	r30, 0x21	; 33
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	88 7f       	andi	r24, 0xF8	; 248
    1616:	90 70       	andi	r25, 0x00	; 0
    1618:	28 17       	cp	r18, r24
    161a:	39 07       	cpc	r19, r25
    161c:	19 f4       	brne	.+6      	; 0x1624 <I2c_u8CheckStatus+0x2c>
	{
		return 1;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <I2c_u8CheckStatus+0x2e>
	}
	else
	{
		return 0;
    1624:	1a 82       	std	Y+2, r1	; 0x02
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
	}

}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <LCD_VidSendInst>:
#include "LCD_CFG.h"
#include "LCD_INT.h"
#include <avr/delay.h>

void LCD_VidSendInst(u8 u8Inst)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	2f 97       	sbiw	r28, 0x0f	; 15
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_vidSetPinVal(LCD_CTR_PORT,RS_PIN,LOW);
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_vidSetPinVal>
	DIO_vidSetPinVal(LCD_CTR_PORT,RW_PIN,LOW);
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	61 e0       	ldi	r22, 0x01	; 1
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_vidSetPinVal>
	DIO_vidSetPinVal(LCD_CTR_PORT,E_PIN,HIGH);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	62 e0       	ldi	r22, 0x02	; 2
    1660:	4f ef       	ldi	r20, 0xFF	; 255
    1662:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_vidSetPinVal>
	DIO_vidSetPortVal(LCD_DATA_PORT,u8Inst);
    1666:	83 e0       	ldi	r24, 0x03	; 3
    1668:	6f 85       	ldd	r22, Y+15	; 0x0f
    166a:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_vidSetPortVal>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a0 e0       	ldi	r26, 0x00	; 0
    1674:	b0 e4       	ldi	r27, 0x40	; 64
    1676:	8b 87       	std	Y+11, r24	; 0x0b
    1678:	9c 87       	std	Y+12, r25	; 0x0c
    167a:	ad 87       	std	Y+13, r26	; 0x0d
    167c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1680:	7c 85       	ldd	r23, Y+12	; 0x0c
    1682:	8d 85       	ldd	r24, Y+13	; 0x0d
    1684:	9e 85       	ldd	r25, Y+14	; 0x0e
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	4a ef       	ldi	r20, 0xFA	; 250
    168c:	54 e4       	ldi	r21, 0x44	; 68
    168e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	8f 83       	std	Y+7, r24	; 0x07
    1698:	98 87       	std	Y+8, r25	; 0x08
    169a:	a9 87       	std	Y+9, r26	; 0x09
    169c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    169e:	6f 81       	ldd	r22, Y+7	; 0x07
    16a0:	78 85       	ldd	r23, Y+8	; 0x08
    16a2:	89 85       	ldd	r24, Y+9	; 0x09
    16a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <LCD_VidSendInst+0x8e>
		__ticks = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	3f c0       	rjmp	.+126    	; 0x173e <LCD_VidSendInst+0x10c>
	else if (__tmp > 65535)
    16c0:	6f 81       	ldd	r22, Y+7	; 0x07
    16c2:	78 85       	ldd	r23, Y+8	; 0x08
    16c4:	89 85       	ldd	r24, Y+9	; 0x09
    16c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	3f ef       	ldi	r19, 0xFF	; 255
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	57 e4       	ldi	r21, 0x47	; 71
    16d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16d4:	18 16       	cp	r1, r24
    16d6:	4c f5       	brge	.+82     	; 0x172a <LCD_VidSendInst+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16da:	7c 85       	ldd	r23, Y+12	; 0x0c
    16dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16de:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e2       	ldi	r20, 0x20	; 32
    16e6:	51 e4       	ldi	r21, 0x41	; 65
    16e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	0f c0       	rjmp	.+30     	; 0x1720 <LCD_VidSendInst+0xee>
    1702:	88 ec       	ldi	r24, 0xC8	; 200
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9c 83       	std	Y+4, r25	; 0x04
    1708:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <LCD_VidSendInst+0xdc>
    1712:	9c 83       	std	Y+4, r25	; 0x04
    1714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	9e 81       	ldd	r25, Y+6	; 0x06
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	69 f7       	brne	.-38     	; 0x1702 <LCD_VidSendInst+0xd0>
    1728:	14 c0       	rjmp	.+40     	; 0x1752 <LCD_VidSendInst+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <LCD_VidSendInst+0x118>
    174e:	9a 83       	std	Y+2, r25	; 0x02
    1750:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_vidSetPinVal(LCD_CTR_PORT,E_PIN,LOW);
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	62 e0       	ldi	r22, 0x02	; 2
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_vidSetPinVal>
}
    175c:	2f 96       	adiw	r28, 0x0f	; 15
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <LCD_VidInit>:
void LCD_VidInit(void)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	aa 97       	sbiw	r28, 0x2a	; 42
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
	DIO_vidSetPinDir(LCD_CTR_PORT,RS_PIN,OUTPUT);
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	4f ef       	ldi	r20, 0xFF	; 255
    1788:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(LCD_CTR_PORT,RW_PIN,OUTPUT);
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	4f ef       	ldi	r20, 0xFF	; 255
    1792:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(LCD_CTR_PORT,E_PIN,OUTPUT);
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	62 e0       	ldi	r22, 0x02	; 2
    179a:	4f ef       	ldi	r20, 0xFF	; 255
    179c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinDir>
	DIO_vidSetPortDir(LCD_DATA_PORT,OUTPUT);
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	6f ef       	ldi	r22, 0xFF	; 255
    17a4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_vidSetPortDir>

	LCD_VidSendInst(LCD_FUNC_SET);
    17a8:	88 e3       	ldi	r24, 0x38	; 56
    17aa:	0e 94 19 0b 	call	0x1632	; 0x1632 <LCD_VidSendInst>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a0 e8       	ldi	r26, 0x80	; 128
    17b4:	bf e3       	ldi	r27, 0x3F	; 63
    17b6:	8f a3       	std	Y+39, r24	; 0x27
    17b8:	98 a7       	std	Y+40, r25	; 0x28
    17ba:	a9 a7       	std	Y+41, r26	; 0x29
    17bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	6f a1       	ldd	r22, Y+39	; 0x27
    17c0:	78 a5       	ldd	r23, Y+40	; 0x28
    17c2:	89 a5       	ldd	r24, Y+41	; 0x29
    17c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a ef       	ldi	r20, 0xFA	; 250
    17cc:	54 e4       	ldi	r21, 0x44	; 68
    17ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	8b a3       	std	Y+35, r24	; 0x23
    17d8:	9c a3       	std	Y+36, r25	; 0x24
    17da:	ad a3       	std	Y+37, r26	; 0x25
    17dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17de:	6b a1       	ldd	r22, Y+35	; 0x23
    17e0:	7c a1       	ldd	r23, Y+36	; 0x24
    17e2:	8d a1       	ldd	r24, Y+37	; 0x25
    17e4:	9e a1       	ldd	r25, Y+38	; 0x26
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	2c f4       	brge	.+10     	; 0x1800 <LCD_VidInit+0x92>
		__ticks = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9a a3       	std	Y+34, r25	; 0x22
    17fc:	89 a3       	std	Y+33, r24	; 0x21
    17fe:	3f c0       	rjmp	.+126    	; 0x187e <LCD_VidInit+0x110>
	else if (__tmp > 65535)
    1800:	6b a1       	ldd	r22, Y+35	; 0x23
    1802:	7c a1       	ldd	r23, Y+36	; 0x24
    1804:	8d a1       	ldd	r24, Y+37	; 0x25
    1806:	9e a1       	ldd	r25, Y+38	; 0x26
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	4c f5       	brge	.+82     	; 0x186a <LCD_VidInit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	6f a1       	ldd	r22, Y+39	; 0x27
    181a:	78 a5       	ldd	r23, Y+40	; 0x28
    181c:	89 a5       	ldd	r24, Y+41	; 0x29
    181e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <LCD_VidInit+0xf2>
    1842:	88 ec       	ldi	r24, 0xC8	; 200
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	98 a3       	std	Y+32, r25	; 0x20
    1848:	8f 8f       	std	Y+31, r24	; 0x1f
    184a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    184c:	98 a1       	ldd	r25, Y+32	; 0x20
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCD_VidInit+0xe0>
    1852:	98 a3       	std	Y+32, r25	; 0x20
    1854:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1856:	89 a1       	ldd	r24, Y+33	; 0x21
    1858:	9a a1       	ldd	r25, Y+34	; 0x22
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	9a a3       	std	Y+34, r25	; 0x22
    185e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	89 a1       	ldd	r24, Y+33	; 0x21
    1862:	9a a1       	ldd	r25, Y+34	; 0x22
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	69 f7       	brne	.-38     	; 0x1842 <LCD_VidInit+0xd4>
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <LCD_VidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	6b a1       	ldd	r22, Y+35	; 0x23
    186c:	7c a1       	ldd	r23, Y+36	; 0x24
    186e:	8d a1       	ldd	r24, Y+37	; 0x25
    1870:	9e a1       	ldd	r25, Y+38	; 0x26
    1872:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9a a3       	std	Y+34, r25	; 0x22
    187c:	89 a3       	std	Y+33, r24	; 0x21
    187e:	89 a1       	ldd	r24, Y+33	; 0x21
    1880:	9a a1       	ldd	r25, Y+34	; 0x22
    1882:	9e 8f       	std	Y+30, r25	; 0x1e
    1884:	8d 8f       	std	Y+29, r24	; 0x1d
    1886:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1888:	9e 8d       	ldd	r25, Y+30	; 0x1e
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_VidInit+0x11c>
    188e:	9e 8f       	std	Y+30, r25	; 0x1e
    1890:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidSendInst(LCD_DISP_CBON);
    1892:	8f e0       	ldi	r24, 0x0F	; 15
    1894:	0e 94 19 0b 	call	0x1632	; 0x1632 <LCD_VidSendInst>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 e8       	ldi	r26, 0x80	; 128
    189e:	bf e3       	ldi	r27, 0x3F	; 63
    18a0:	89 8f       	std	Y+25, r24	; 0x19
    18a2:	9a 8f       	std	Y+26, r25	; 0x1a
    18a4:	ab 8f       	std	Y+27, r26	; 0x1b
    18a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a8:	69 8d       	ldd	r22, Y+25	; 0x19
    18aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	4a ef       	ldi	r20, 0xFA	; 250
    18b6:	54 e4       	ldi	r21, 0x44	; 68
    18b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	8d 8b       	std	Y+21, r24	; 0x15
    18c2:	9e 8b       	std	Y+22, r25	; 0x16
    18c4:	af 8b       	std	Y+23, r26	; 0x17
    18c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18c8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ca:	7e 89       	ldd	r23, Y+22	; 0x16
    18cc:	8f 89       	ldd	r24, Y+23	; 0x17
    18ce:	98 8d       	ldd	r25, Y+24	; 0x18
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	5f e3       	ldi	r21, 0x3F	; 63
    18d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18dc:	88 23       	and	r24, r24
    18de:	2c f4       	brge	.+10     	; 0x18ea <LCD_VidInit+0x17c>
		__ticks = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9c 8b       	std	Y+20, r25	; 0x14
    18e6:	8b 8b       	std	Y+19, r24	; 0x13
    18e8:	3f c0       	rjmp	.+126    	; 0x1968 <LCD_VidInit+0x1fa>
	else if (__tmp > 65535)
    18ea:	6d 89       	ldd	r22, Y+21	; 0x15
    18ec:	7e 89       	ldd	r23, Y+22	; 0x16
    18ee:	8f 89       	ldd	r24, Y+23	; 0x17
    18f0:	98 8d       	ldd	r25, Y+24	; 0x18
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	3f ef       	ldi	r19, 0xFF	; 255
    18f6:	4f e7       	ldi	r20, 0x7F	; 127
    18f8:	57 e4       	ldi	r21, 0x47	; 71
    18fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	4c f5       	brge	.+82     	; 0x1954 <LCD_VidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	69 8d       	ldd	r22, Y+25	; 0x19
    1904:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1906:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1908:	9c 8d       	ldd	r25, Y+28	; 0x1c
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e2       	ldi	r20, 0x20	; 32
    1910:	51 e4       	ldi	r21, 0x41	; 65
    1912:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9c 8b       	std	Y+20, r25	; 0x14
    1928:	8b 8b       	std	Y+19, r24	; 0x13
    192a:	0f c0       	rjmp	.+30     	; 0x194a <LCD_VidInit+0x1dc>
    192c:	88 ec       	ldi	r24, 0xC8	; 200
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9a 8b       	std	Y+18, r25	; 0x12
    1932:	89 8b       	std	Y+17, r24	; 0x11
    1934:	89 89       	ldd	r24, Y+17	; 0x11
    1936:	9a 89       	ldd	r25, Y+18	; 0x12
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_VidInit+0x1ca>
    193c:	9a 8b       	std	Y+18, r25	; 0x12
    193e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1940:	8b 89       	ldd	r24, Y+19	; 0x13
    1942:	9c 89       	ldd	r25, Y+20	; 0x14
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194a:	8b 89       	ldd	r24, Y+19	; 0x13
    194c:	9c 89       	ldd	r25, Y+20	; 0x14
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	69 f7       	brne	.-38     	; 0x192c <LCD_VidInit+0x1be>
    1952:	14 c0       	rjmp	.+40     	; 0x197c <LCD_VidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	6d 89       	ldd	r22, Y+21	; 0x15
    1956:	7e 89       	ldd	r23, Y+22	; 0x16
    1958:	8f 89       	ldd	r24, Y+23	; 0x17
    195a:	98 8d       	ldd	r25, Y+24	; 0x18
    195c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9c 8b       	std	Y+20, r25	; 0x14
    1966:	8b 8b       	std	Y+19, r24	; 0x13
    1968:	8b 89       	ldd	r24, Y+19	; 0x13
    196a:	9c 89       	ldd	r25, Y+20	; 0x14
    196c:	98 8b       	std	Y+16, r25	; 0x10
    196e:	8f 87       	std	Y+15, r24	; 0x0f
    1970:	8f 85       	ldd	r24, Y+15	; 0x0f
    1972:	98 89       	ldd	r25, Y+16	; 0x10
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_VidInit+0x206>
    1978:	98 8b       	std	Y+16, r25	; 0x10
    197a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VidSendInst(LCD_CLR_DISP);
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	0e 94 19 0b 	call	0x1632	; 0x1632 <LCD_VidSendInst>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e8       	ldi	r26, 0x80	; 128
    1988:	bf e3       	ldi	r27, 0x3F	; 63
    198a:	8b 87       	std	Y+11, r24	; 0x0b
    198c:	9c 87       	std	Y+12, r25	; 0x0c
    198e:	ad 87       	std	Y+13, r26	; 0x0d
    1990:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	6b 85       	ldd	r22, Y+11	; 0x0b
    1994:	7c 85       	ldd	r23, Y+12	; 0x0c
    1996:	8d 85       	ldd	r24, Y+13	; 0x0d
    1998:	9e 85       	ldd	r25, Y+14	; 0x0e
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a ef       	ldi	r20, 0xFA	; 250
    19a0:	54 e4       	ldi	r21, 0x44	; 68
    19a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8f 83       	std	Y+7, r24	; 0x07
    19ac:	98 87       	std	Y+8, r25	; 0x08
    19ae:	a9 87       	std	Y+9, r26	; 0x09
    19b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
    19b4:	78 85       	ldd	r23, Y+8	; 0x08
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <LCD_VidInit+0x266>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <LCD_VidInit+0x2e4>
	else if (__tmp > 65535)
    19d4:	6f 81       	ldd	r22, Y+7	; 0x07
    19d6:	78 85       	ldd	r23, Y+8	; 0x08
    19d8:	89 85       	ldd	r24, Y+9	; 0x09
    19da:	9a 85       	ldd	r25, Y+10	; 0x0a
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <LCD_VidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <LCD_VidInit+0x2c6>
    1a16:	88 ec       	ldi	r24, 0xC8	; 200
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_VidInit+0x2b4>
    1a26:	9c 83       	std	Y+4, r25	; 0x04
    1a28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <LCD_VidInit+0x2a8>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <LCD_VidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_VidInit+0x2f0>
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1a66:	aa 96       	adiw	r28, 0x2a	; 42
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <LCD_VidSendData>:


void LCD_VidSendData(u8 u8Data)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	2f 97       	sbiw	r28, 0x0f	; 15
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	8f 87       	std	Y+15, r24	; 0x0f
DIO_vidSetPinVal(LCD_CTR_PORT,RS_PIN,HIGH);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	4f ef       	ldi	r20, 0xFF	; 255
    1a94:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_vidSetPinVal>
DIO_vidSetPinVal(LCD_CTR_PORT,RW_PIN,LOW);
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_vidSetPinVal>
DIO_vidSetPinVal(LCD_CTR_PORT,E_PIN,HIGH);
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	62 e0       	ldi	r22, 0x02	; 2
    1aa6:	4f ef       	ldi	r20, 0xFF	; 255
    1aa8:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_vidSetPinVal>
DIO_vidSetPortVal(LCD_DATA_PORT,u8Data);
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ab0:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_vidSetPortVal>
DIO_vidSetPinVal(LCD_CTR_PORT,E_PIN,LOW);
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	62 e0       	ldi	r22, 0x02	; 2
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_vidSetPinVal>
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a0 e8       	ldi	r26, 0x80	; 128
    1ac4:	bf e3       	ldi	r27, 0x3F	; 63
    1ac6:	8b 87       	std	Y+11, r24	; 0x0b
    1ac8:	9c 87       	std	Y+12, r25	; 0x0c
    1aca:	ad 87       	std	Y+13, r26	; 0x0d
    1acc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	4a ef       	ldi	r20, 0xFA	; 250
    1adc:	54 e4       	ldi	r21, 0x44	; 68
    1ade:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	8f 83       	std	Y+7, r24	; 0x07
    1ae8:	98 87       	std	Y+8, r25	; 0x08
    1aea:	a9 87       	std	Y+9, r26	; 0x09
    1aec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e8       	ldi	r20, 0x80	; 128
    1afc:	5f e3       	ldi	r21, 0x3F	; 63
    1afe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b02:	88 23       	and	r24, r24
    1b04:	2c f4       	brge	.+10     	; 0x1b10 <LCD_VidSendData+0x98>
		__ticks = 1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9e 83       	std	Y+6, r25	; 0x06
    1b0c:	8d 83       	std	Y+5, r24	; 0x05
    1b0e:	3f c0       	rjmp	.+126    	; 0x1b8e <LCD_VidSendData+0x116>
	else if (__tmp > 65535)
    1b10:	6f 81       	ldd	r22, Y+7	; 0x07
    1b12:	78 85       	ldd	r23, Y+8	; 0x08
    1b14:	89 85       	ldd	r24, Y+9	; 0x09
    1b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	3f ef       	ldi	r19, 0xFF	; 255
    1b1c:	4f e7       	ldi	r20, 0x7F	; 127
    1b1e:	57 e4       	ldi	r21, 0x47	; 71
    1b20:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b24:	18 16       	cp	r1, r24
    1b26:	4c f5       	brge	.+82     	; 0x1b7a <LCD_VidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e2       	ldi	r20, 0x20	; 32
    1b36:	51 e4       	ldi	r21, 0x41	; 65
    1b38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	bc 01       	movw	r22, r24
    1b42:	cd 01       	movw	r24, r26
    1b44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
    1b50:	0f c0       	rjmp	.+30     	; 0x1b70 <LCD_VidSendData+0xf8>
    1b52:	88 ec       	ldi	r24, 0xC8	; 200
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9c 83       	std	Y+4, r25	; 0x04
    1b58:	8b 83       	std	Y+3, r24	; 0x03
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <LCD_VidSendData+0xe6>
    1b62:	9c 83       	std	Y+4, r25	; 0x04
    1b64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	69 f7       	brne	.-38     	; 0x1b52 <LCD_VidSendData+0xda>
    1b78:	14 c0       	rjmp	.+40     	; 0x1ba2 <LCD_VidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7c:	78 85       	ldd	r23, Y+8	; 0x08
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9e 83       	std	Y+6, r25	; 0x06
    1b8c:	8d 83       	std	Y+5, r24	; 0x05
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <LCD_VidSendData+0x122>
    1b9e:	9a 83       	std	Y+2, r25	; 0x02
    1ba0:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
DIO_vidSetPinVal(LCD_CTR_PORT,E_PIN,HIGH);
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	62 e0       	ldi	r22, 0x02	; 2
    1ba6:	4f ef       	ldi	r20, 0xFF	; 255
    1ba8:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_vidSetPinVal>
}
    1bac:	2f 96       	adiw	r28, 0x0f	; 15
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <LCD_VidWriteString>:

void LCD_VidWriteString(u8* Pu8Data)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <LCD_VidWriteString+0x6>
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	9b 83       	std	Y+3, r25	; 0x03
    1bcc:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8LoopCtr=0;
    1bce:	19 82       	std	Y+1, r1	; 0x01
    1bd0:	15 c0       	rjmp	.+42     	; 0x1bfc <LCD_VidWriteString+0x3e>
	while(Pu8Data[u8LoopCtr] !=0)//fakt l gomla dy *(Pu8DAta+u8loopctr) da nzakr pointer aw c ya man b2a
	{
		LCD_VidSendData(Pu8Data[u8LoopCtr]);
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	9b 81       	ldd	r25, Y+3	; 0x03
    1bdc:	fc 01       	movw	r30, r24
    1bde:	e2 0f       	add	r30, r18
    1be0:	f3 1f       	adc	r31, r19
    1be2:	80 81       	ld	r24, Z
    1be4:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
		u8LoopCtr++;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	8f 5f       	subi	r24, 0xFF	; 255
    1bec:	89 83       	std	Y+1, r24	; 0x01
		if(u8LoopCtr==16)
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	80 31       	cpi	r24, 0x10	; 16
    1bf2:	21 f4       	brne	.+8      	; 0x1bfc <LCD_VidWriteString+0x3e>
		{
			LCD_VidGoToXY(ROW1,COL0);
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_VidGoToXY>
}

void LCD_VidWriteString(u8* Pu8Data)
{
	u8 u8LoopCtr=0;
	while(Pu8Data[u8LoopCtr] !=0)//fakt l gomla dy *(Pu8DAta+u8loopctr) da nzakr pointer aw c ya man b2a
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	9b 81       	ldd	r25, Y+3	; 0x03
    1c06:	fc 01       	movw	r30, r24
    1c08:	e2 0f       	add	r30, r18
    1c0a:	f3 1f       	adc	r31, r19
    1c0c:	80 81       	ld	r24, Z
    1c0e:	88 23       	and	r24, r24
    1c10:	01 f7       	brne	.-64     	; 0x1bd2 <LCD_VidWriteString+0x14>
		if(u8LoopCtr==16)
		{
			LCD_VidGoToXY(ROW1,COL0);
		}
	}
}
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <LCD_VidGoToXY>:

void LCD_VidGoToXY(u8 u8Row,u8 u8Col)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <LCD_VidGoToXY+0x6>
    1c24:	0f 92       	push	r0
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	8a 83       	std	Y+2, r24	; 0x02
    1c2c:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8Inst= u8Col;
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	89 83       	std	Y+1, r24	; 0x01
	if(u8Row == ROW1)
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	81 30       	cpi	r24, 0x01	; 1
    1c36:	19 f4       	brne	.+6      	; 0x1c3e <LCD_VidGoToXY+0x20>
	{
		u8Inst|=0x40;
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	80 64       	ori	r24, 0x40	; 64
    1c3c:	89 83       	std	Y+1, r24	; 0x01
	}
	u8Inst|=0x80;
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	80 68       	ori	r24, 0x80	; 128
    1c42:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidSendInst(u8Inst);
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	0e 94 19 0b 	call	0x1632	; 0x1632 <LCD_VidSendInst>
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <LCD_VidWriteNumber>:

void LCD_VidWriteNumber(u16 u16Num)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <LCD_VidWriteNumber+0x6>
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <LCD_VidWriteNumber+0x8>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	9c 83       	std	Y+4, r25	; 0x04
    1c64:	8b 83       	std	Y+3, r24	; 0x03
	u16 u16NumRange=1;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	0e c0       	rjmp	.+28     	; 0x1c8c <LCD_VidWriteNumber+0x36>
	while((u16Num/u16NumRange)!=0)
	{
		u16NumRange*=10;
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	9a 81       	ldd	r25, Y+2	; 0x02
    1c74:	9c 01       	movw	r18, r24
    1c76:	22 0f       	add	r18, r18
    1c78:	33 1f       	adc	r19, r19
    1c7a:	c9 01       	movw	r24, r18
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	82 0f       	add	r24, r18
    1c86:	93 1f       	adc	r25, r19
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_VidWriteNumber(u16 u16Num)
{
	u16 u16NumRange=1;
	while((u16Num/u16NumRange)!=0)
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	29 81       	ldd	r18, Y+1	; 0x01
    1c92:	3a 81       	ldd	r19, Y+2	; 0x02
    1c94:	b9 01       	movw	r22, r18
    1c96:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__udivmodhi4>
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	41 f7       	brne	.-48     	; 0x1c70 <LCD_VidWriteNumber+0x1a>
    1ca0:	1e c0       	rjmp	.+60     	; 0x1cde <LCD_VidWriteNumber+0x88>
	{
		u16NumRange*=10;
	}
	while(u16NumRange!=1)
	{
		u16NumRange/=10;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	2a e0       	ldi	r18, 0x0A	; 10
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	b9 01       	movw	r22, r18
    1cac:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__udivmodhi4>
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01
		LCD_VidSendData((u16Num/u16NumRange)+48);
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	29 81       	ldd	r18, Y+1	; 0x01
    1cbc:	3a 81       	ldd	r19, Y+2	; 0x02
    1cbe:	b9 01       	movw	r22, r18
    1cc0:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__udivmodhi4>
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	80 5d       	subi	r24, 0xD0	; 208
    1cc8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
		u16Num%=u16NumRange;
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	29 81       	ldd	r18, Y+1	; 0x01
    1cd2:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd4:	b9 01       	movw	r22, r18
    1cd6:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__udivmodhi4>
    1cda:	9c 83       	std	Y+4, r25	; 0x04
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
	u16 u16NumRange=1;
	while((u16Num/u16NumRange)!=0)
	{
		u16NumRange*=10;
	}
	while(u16NumRange!=1)
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	e9 f6       	brne	.-70     	; 0x1ca2 <LCD_VidWriteNumber+0x4c>
	{
		u16NumRange/=10;
		LCD_VidSendData((u16Num/u16NumRange)+48);
		u16Num%=u16NumRange;
	}
}
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <main>:
#include"LCD_INT.h"
#include"Eeprom_INT.h"
#include<util/delay.h>

int main(void)
{
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	c5 5c       	subi	r28, 0xC5	; 197
    1d04:	d0 40       	sbci	r29, 0x00	; 0
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
	u8 Rec_Byte=0;
    1d10:	fe 01       	movw	r30, r28
    1d12:	eb 53       	subi	r30, 0x3B	; 59
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	10 82       	st	Z, r1
	Eeprom_VidInit();
    1d18:	0e 94 bd 09 	call	0x137a	; 0x137a <Eeprom_VidInit>
	LCD_VidInit();
    1d1c:	0e 94 b7 0b 	call	0x176e	; 0x176e <LCD_VidInit>

	LCD_VidWriteString("Reading APP: ");
    1d20:	80 e6       	ldi	r24, 0x60	; 96
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <LCD_VidWriteString>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ef 53       	subi	r30, 0x3F	; 63
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	aa ef       	ldi	r26, 0xFA	; 250
    1d34:	b3 e4       	ldi	r27, 0x43	; 67
    1d36:	80 83       	st	Z, r24
    1d38:	91 83       	std	Z+1, r25	; 0x01
    1d3a:	a2 83       	std	Z+2, r26	; 0x02
    1d3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3e:	8e 01       	movw	r16, r28
    1d40:	03 54       	subi	r16, 0x43	; 67
    1d42:	1f 4f       	sbci	r17, 0xFF	; 255
    1d44:	fe 01       	movw	r30, r28
    1d46:	ef 53       	subi	r30, 0x3F	; 63
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4a ef       	ldi	r20, 0xFA	; 250
    1d58:	54 e4       	ldi	r21, 0x44	; 68
    1d5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	f8 01       	movw	r30, r16
    1d64:	80 83       	st	Z, r24
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	a2 83       	std	Z+2, r26	; 0x02
    1d6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e3 54       	subi	r30, 0x43	; 67
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	44 f4       	brge	.+16     	; 0x1d9a <main+0xa4>
		__ticks = 1;
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e5 54       	subi	r30, 0x45	; 69
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
    1d98:	64 c0       	rjmp	.+200    	; 0x1e62 <main+0x16c>
	else if (__tmp > 65535)
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e3 54       	subi	r30, 0x43	; 67
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	60 81       	ld	r22, Z
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	4f e7       	ldi	r20, 0x7F	; 127
    1dae:	57 e4       	ldi	r21, 0x47	; 71
    1db0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1db4:	18 16       	cp	r1, r24
    1db6:	0c f0       	brlt	.+2      	; 0x1dba <main+0xc4>
    1db8:	43 c0       	rjmp	.+134    	; 0x1e40 <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dba:	fe 01       	movw	r30, r28
    1dbc:	ef 53       	subi	r30, 0x3F	; 63
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e2       	ldi	r20, 0x20	; 32
    1dce:	51 e4       	ldi	r21, 0x41	; 65
    1dd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	8e 01       	movw	r16, r28
    1dda:	05 54       	subi	r16, 0x45	; 69
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	f8 01       	movw	r30, r16
    1dec:	91 83       	std	Z+1, r25	; 0x01
    1dee:	80 83       	st	Z, r24
    1df0:	1f c0       	rjmp	.+62     	; 0x1e30 <main+0x13a>
    1df2:	fe 01       	movw	r30, r28
    1df4:	e7 54       	subi	r30, 0x47	; 71
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	88 ec       	ldi	r24, 0xC8	; 200
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
    1e00:	fe 01       	movw	r30, r28
    1e02:	e7 54       	subi	r30, 0x47	; 71
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	91 81       	ldd	r25, Z+1	; 0x01
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <main+0x114>
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e7 54       	subi	r30, 0x47	; 71
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	de 01       	movw	r26, r28
    1e1a:	a5 54       	subi	r26, 0x45	; 69
    1e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e5 54       	subi	r30, 0x45	; 69
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	11 96       	adiw	r26, 0x01	; 1
    1e2c:	9c 93       	st	X, r25
    1e2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e30:	fe 01       	movw	r30, r28
    1e32:	e5 54       	subi	r30, 0x45	; 69
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 81       	ld	r24, Z
    1e38:	91 81       	ldd	r25, Z+1	; 0x01
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	d1 f6       	brne	.-76     	; 0x1df2 <main+0xfc>
    1e3e:	27 c0       	rjmp	.+78     	; 0x1e8e <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e40:	8e 01       	movw	r16, r28
    1e42:	05 54       	subi	r16, 0x45	; 69
    1e44:	1f 4f       	sbci	r17, 0xFF	; 255
    1e46:	fe 01       	movw	r30, r28
    1e48:	e3 54       	subi	r30, 0x43	; 67
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
    1e62:	de 01       	movw	r26, r28
    1e64:	a9 54       	subi	r26, 0x49	; 73
    1e66:	bf 4f       	sbci	r27, 0xFF	; 255
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e5 54       	subi	r30, 0x45	; 69
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	8d 93       	st	X+, r24
    1e74:	9c 93       	st	X, r25
    1e76:	fe 01       	movw	r30, r28
    1e78:	e9 54       	subi	r30, 0x49	; 73
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	80 81       	ld	r24, Z
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <main+0x18a>
    1e84:	fe 01       	movw	r30, r28
    1e86:	e9 54       	subi	r30, 0x49	; 73
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	80 83       	st	Z, r24
	_delay_ms(500);

	LCD_VidSendInst(LCD_2ndLINE_STRT);
    1e8e:	80 ec       	ldi	r24, 0xC0	; 192
    1e90:	0e 94 19 0b 	call	0x1632	; 0x1632 <LCD_VidSendInst>

	Eeprom_u8ReadByte(0,0,&Rec_Byte);
    1e94:	9e 01       	movw	r18, r28
    1e96:	2b 53       	subi	r18, 0x3B	; 59
    1e98:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	70 e0       	ldi	r23, 0x00	; 0
    1ea0:	a9 01       	movw	r20, r18
    1ea2:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
	LCD_VidSendData(Rec_Byte);
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	eb 53       	subi	r30, 0x3B	; 59
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	80 81       	ld	r24, Z
    1eae:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	ed 54       	subi	r30, 0x4D	; 77
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e2       	ldi	r26, 0x20	; 32
    1ebe:	b1 e4       	ldi	r27, 0x41	; 65
    1ec0:	80 83       	st	Z, r24
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	a2 83       	std	Z+2, r26	; 0x02
    1ec6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec8:	8e 01       	movw	r16, r28
    1eca:	01 55       	subi	r16, 0x51	; 81
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ed 54       	subi	r30, 0x4D	; 77
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	4a ef       	ldi	r20, 0xFA	; 250
    1ee2:	54 e4       	ldi	r21, 0x44	; 68
    1ee4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	f8 01       	movw	r30, r16
    1eee:	80 83       	st	Z, r24
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	a2 83       	std	Z+2, r26	; 0x02
    1ef4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	e1 55       	subi	r30, 0x51	; 81
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	44 f4       	brge	.+16     	; 0x1f24 <main+0x22e>
		__ticks = 1;
    1f14:	fe 01       	movw	r30, r28
    1f16:	e3 55       	subi	r30, 0x53	; 83
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
    1f22:	64 c0       	rjmp	.+200    	; 0x1fec <main+0x2f6>
	else if (__tmp > 65535)
    1f24:	fe 01       	movw	r30, r28
    1f26:	e1 55       	subi	r30, 0x51	; 81
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	3f ef       	ldi	r19, 0xFF	; 255
    1f36:	4f e7       	ldi	r20, 0x7F	; 127
    1f38:	57 e4       	ldi	r21, 0x47	; 71
    1f3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	0c f0       	brlt	.+2      	; 0x1f44 <main+0x24e>
    1f42:	43 c0       	rjmp	.+134    	; 0x1fca <main+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f44:	fe 01       	movw	r30, r28
    1f46:	ed 54       	subi	r30, 0x4D	; 77
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	8e 01       	movw	r16, r28
    1f64:	03 55       	subi	r16, 0x53	; 83
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	f8 01       	movw	r30, r16
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	80 83       	st	Z, r24
    1f7a:	1f c0       	rjmp	.+62     	; 0x1fba <main+0x2c4>
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e5 55       	subi	r30, 0x55	; 85
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	88 ec       	ldi	r24, 0xC8	; 200
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	80 83       	st	Z, r24
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e5 55       	subi	r30, 0x55	; 85
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	80 81       	ld	r24, Z
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <main+0x29e>
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e5 55       	subi	r30, 0x55	; 85
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	91 83       	std	Z+1, r25	; 0x01
    1fa0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa2:	de 01       	movw	r26, r28
    1fa4:	a3 55       	subi	r26, 0x53	; 83
    1fa6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e3 55       	subi	r30, 0x53	; 83
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	80 81       	ld	r24, Z
    1fb0:	91 81       	ldd	r25, Z+1	; 0x01
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	11 96       	adiw	r26, 0x01	; 1
    1fb6:	9c 93       	st	X, r25
    1fb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e3 55       	subi	r30, 0x53	; 83
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	91 81       	ldd	r25, Z+1	; 0x01
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	d1 f6       	brne	.-76     	; 0x1f7c <main+0x286>
    1fc8:	27 c0       	rjmp	.+78     	; 0x2018 <main+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fca:	8e 01       	movw	r16, r28
    1fcc:	03 55       	subi	r16, 0x53	; 83
    1fce:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e1 55       	subi	r30, 0x51	; 81
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	f8 01       	movw	r30, r16
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
    1fec:	de 01       	movw	r26, r28
    1fee:	a7 55       	subi	r26, 0x57	; 87
    1ff0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e3 55       	subi	r30, 0x53	; 83
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 81       	ld	r24, Z
    1ffa:	91 81       	ldd	r25, Z+1	; 0x01
    1ffc:	8d 93       	st	X+, r24
    1ffe:	9c 93       	st	X, r25
    2000:	fe 01       	movw	r30, r28
    2002:	e7 55       	subi	r30, 0x57	; 87
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <main+0x314>
    200e:	fe 01       	movw	r30, r28
    2010:	e7 55       	subi	r30, 0x57	; 87
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
	_delay_ms(10);

	Eeprom_u8ReadByte(0,1,&Rec_Byte);
    2018:	9e 01       	movw	r18, r28
    201a:	2b 53       	subi	r18, 0x3B	; 59
    201c:	3f 4f       	sbci	r19, 0xFF	; 255
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	61 e0       	ldi	r22, 0x01	; 1
    2022:	70 e0       	ldi	r23, 0x00	; 0
    2024:	a9 01       	movw	r20, r18
    2026:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
	LCD_VidSendData(Rec_Byte);
    202a:	fe 01       	movw	r30, r28
    202c:	eb 53       	subi	r30, 0x3B	; 59
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	80 81       	ld	r24, Z
    2032:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    2036:	fe 01       	movw	r30, r28
    2038:	eb 55       	subi	r30, 0x5B	; 91
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a0 e2       	ldi	r26, 0x20	; 32
    2042:	b1 e4       	ldi	r27, 0x41	; 65
    2044:	80 83       	st	Z, r24
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	a2 83       	std	Z+2, r26	; 0x02
    204a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204c:	8e 01       	movw	r16, r28
    204e:	0f 55       	subi	r16, 0x5F	; 95
    2050:	1f 4f       	sbci	r17, 0xFF	; 255
    2052:	fe 01       	movw	r30, r28
    2054:	eb 55       	subi	r30, 0x5B	; 91
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	60 81       	ld	r22, Z
    205a:	71 81       	ldd	r23, Z+1	; 0x01
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	93 81       	ldd	r25, Z+3	; 0x03
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	4a ef       	ldi	r20, 0xFA	; 250
    2066:	54 e4       	ldi	r21, 0x44	; 68
    2068:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	f8 01       	movw	r30, r16
    2072:	80 83       	st	Z, r24
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	a2 83       	std	Z+2, r26	; 0x02
    2078:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    207a:	fe 01       	movw	r30, r28
    207c:	ef 55       	subi	r30, 0x5F	; 95
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	60 81       	ld	r22, Z
    2082:	71 81       	ldd	r23, Z+1	; 0x01
    2084:	82 81       	ldd	r24, Z+2	; 0x02
    2086:	93 81       	ldd	r25, Z+3	; 0x03
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	40 e8       	ldi	r20, 0x80	; 128
    208e:	5f e3       	ldi	r21, 0x3F	; 63
    2090:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2094:	88 23       	and	r24, r24
    2096:	44 f4       	brge	.+16     	; 0x20a8 <main+0x3b2>
		__ticks = 1;
    2098:	fe 01       	movw	r30, r28
    209a:	e1 56       	subi	r30, 0x61	; 97
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
    20a6:	64 c0       	rjmp	.+200    	; 0x2170 <main+0x47a>
	else if (__tmp > 65535)
    20a8:	fe 01       	movw	r30, r28
    20aa:	ef 55       	subi	r30, 0x5F	; 95
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	3f ef       	ldi	r19, 0xFF	; 255
    20ba:	4f e7       	ldi	r20, 0x7F	; 127
    20bc:	57 e4       	ldi	r21, 0x47	; 71
    20be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	0c f0       	brlt	.+2      	; 0x20c8 <main+0x3d2>
    20c6:	43 c0       	rjmp	.+134    	; 0x214e <main+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c8:	fe 01       	movw	r30, r28
    20ca:	eb 55       	subi	r30, 0x5B	; 91
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e2       	ldi	r20, 0x20	; 32
    20dc:	51 e4       	ldi	r21, 0x41	; 65
    20de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8e 01       	movw	r16, r28
    20e8:	01 56       	subi	r16, 0x61	; 97
    20ea:	1f 4f       	sbci	r17, 0xFF	; 255
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	f8 01       	movw	r30, r16
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	80 83       	st	Z, r24
    20fe:	1f c0       	rjmp	.+62     	; 0x213e <main+0x448>
    2100:	fe 01       	movw	r30, r28
    2102:	e3 56       	subi	r30, 0x63	; 99
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	88 ec       	ldi	r24, 0xC8	; 200
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	91 83       	std	Z+1, r25	; 0x01
    210c:	80 83       	st	Z, r24
    210e:	fe 01       	movw	r30, r28
    2110:	e3 56       	subi	r30, 0x63	; 99
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <main+0x422>
    211c:	fe 01       	movw	r30, r28
    211e:	e3 56       	subi	r30, 0x63	; 99
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	91 83       	std	Z+1, r25	; 0x01
    2124:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2126:	de 01       	movw	r26, r28
    2128:	a1 56       	subi	r26, 0x61	; 97
    212a:	bf 4f       	sbci	r27, 0xFF	; 255
    212c:	fe 01       	movw	r30, r28
    212e:	e1 56       	subi	r30, 0x61	; 97
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	11 96       	adiw	r26, 0x01	; 1
    213a:	9c 93       	st	X, r25
    213c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213e:	fe 01       	movw	r30, r28
    2140:	e1 56       	subi	r30, 0x61	; 97
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	d1 f6       	brne	.-76     	; 0x2100 <main+0x40a>
    214c:	27 c0       	rjmp	.+78     	; 0x219c <main+0x4a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	8e 01       	movw	r16, r28
    2150:	01 56       	subi	r16, 0x61	; 97
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	fe 01       	movw	r30, r28
    2156:	ef 55       	subi	r30, 0x5F	; 95
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	f8 01       	movw	r30, r16
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	80 83       	st	Z, r24
    2170:	de 01       	movw	r26, r28
    2172:	a5 56       	subi	r26, 0x65	; 101
    2174:	bf 4f       	sbci	r27, 0xFF	; 255
    2176:	fe 01       	movw	r30, r28
    2178:	e1 56       	subi	r30, 0x61	; 97
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	8d 93       	st	X+, r24
    2182:	9c 93       	st	X, r25
    2184:	fe 01       	movw	r30, r28
    2186:	e5 56       	subi	r30, 0x65	; 101
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	80 81       	ld	r24, Z
    218c:	91 81       	ldd	r25, Z+1	; 0x01
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <main+0x498>
    2192:	fe 01       	movw	r30, r28
    2194:	e5 56       	subi	r30, 0x65	; 101
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
	_delay_ms(10);

	Eeprom_u8ReadByte(0,2,&Rec_Byte);
    219c:	9e 01       	movw	r18, r28
    219e:	2b 53       	subi	r18, 0x3B	; 59
    21a0:	3f 4f       	sbci	r19, 0xFF	; 255
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	a9 01       	movw	r20, r18
    21aa:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
	LCD_VidSendData(Rec_Byte);
    21ae:	fe 01       	movw	r30, r28
    21b0:	eb 53       	subi	r30, 0x3B	; 59
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	80 81       	ld	r24, Z
    21b6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    21ba:	fe 01       	movw	r30, r28
    21bc:	e9 56       	subi	r30, 0x69	; 105
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	a0 e2       	ldi	r26, 0x20	; 32
    21c6:	b1 e4       	ldi	r27, 0x41	; 65
    21c8:	80 83       	st	Z, r24
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	a2 83       	std	Z+2, r26	; 0x02
    21ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d0:	8e 01       	movw	r16, r28
    21d2:	0d 56       	subi	r16, 0x6D	; 109
    21d4:	1f 4f       	sbci	r17, 0xFF	; 255
    21d6:	fe 01       	movw	r30, r28
    21d8:	e9 56       	subi	r30, 0x69	; 105
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a ef       	ldi	r20, 0xFA	; 250
    21ea:	54 e4       	ldi	r21, 0x44	; 68
    21ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	f8 01       	movw	r30, r16
    21f6:	80 83       	st	Z, r24
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	a2 83       	std	Z+2, r26	; 0x02
    21fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21fe:	fe 01       	movw	r30, r28
    2200:	ed 56       	subi	r30, 0x6D	; 109
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	60 81       	ld	r22, Z
    2206:	71 81       	ldd	r23, Z+1	; 0x01
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	93 81       	ldd	r25, Z+3	; 0x03
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	44 f4       	brge	.+16     	; 0x222c <main+0x536>
		__ticks = 1;
    221c:	fe 01       	movw	r30, r28
    221e:	ef 56       	subi	r30, 0x6F	; 111
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
    222a:	64 c0       	rjmp	.+200    	; 0x22f4 <main+0x5fe>
	else if (__tmp > 65535)
    222c:	fe 01       	movw	r30, r28
    222e:	ed 56       	subi	r30, 0x6D	; 109
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	60 81       	ld	r22, Z
    2234:	71 81       	ldd	r23, Z+1	; 0x01
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	3f ef       	ldi	r19, 0xFF	; 255
    223e:	4f e7       	ldi	r20, 0x7F	; 127
    2240:	57 e4       	ldi	r21, 0x47	; 71
    2242:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2246:	18 16       	cp	r1, r24
    2248:	0c f0       	brlt	.+2      	; 0x224c <main+0x556>
    224a:	43 c0       	rjmp	.+134    	; 0x22d2 <main+0x5dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	fe 01       	movw	r30, r28
    224e:	e9 56       	subi	r30, 0x69	; 105
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	8e 01       	movw	r16, r28
    226c:	0f 56       	subi	r16, 0x6F	; 111
    226e:	1f 4f       	sbci	r17, 0xFF	; 255
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	f8 01       	movw	r30, r16
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	80 83       	st	Z, r24
    2282:	1f c0       	rjmp	.+62     	; 0x22c2 <main+0x5cc>
    2284:	fe 01       	movw	r30, r28
    2286:	e1 57       	subi	r30, 0x71	; 113
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	88 ec       	ldi	r24, 0xC8	; 200
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	91 83       	std	Z+1, r25	; 0x01
    2290:	80 83       	st	Z, r24
    2292:	fe 01       	movw	r30, r28
    2294:	e1 57       	subi	r30, 0x71	; 113
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <main+0x5a6>
    22a0:	fe 01       	movw	r30, r28
    22a2:	e1 57       	subi	r30, 0x71	; 113
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	91 83       	std	Z+1, r25	; 0x01
    22a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22aa:	de 01       	movw	r26, r28
    22ac:	af 56       	subi	r26, 0x6F	; 111
    22ae:	bf 4f       	sbci	r27, 0xFF	; 255
    22b0:	fe 01       	movw	r30, r28
    22b2:	ef 56       	subi	r30, 0x6F	; 111
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 81       	ld	r24, Z
    22b8:	91 81       	ldd	r25, Z+1	; 0x01
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	11 96       	adiw	r26, 0x01	; 1
    22be:	9c 93       	st	X, r25
    22c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c2:	fe 01       	movw	r30, r28
    22c4:	ef 56       	subi	r30, 0x6F	; 111
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	d1 f6       	brne	.-76     	; 0x2284 <main+0x58e>
    22d0:	27 c0       	rjmp	.+78     	; 0x2320 <main+0x62a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	8e 01       	movw	r16, r28
    22d4:	0f 56       	subi	r16, 0x6F	; 111
    22d6:	1f 4f       	sbci	r17, 0xFF	; 255
    22d8:	fe 01       	movw	r30, r28
    22da:	ed 56       	subi	r30, 0x6D	; 109
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	60 81       	ld	r22, Z
    22e0:	71 81       	ldd	r23, Z+1	; 0x01
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	f8 01       	movw	r30, r16
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	80 83       	st	Z, r24
    22f4:	de 01       	movw	r26, r28
    22f6:	a3 57       	subi	r26, 0x73	; 115
    22f8:	bf 4f       	sbci	r27, 0xFF	; 255
    22fa:	fe 01       	movw	r30, r28
    22fc:	ef 56       	subi	r30, 0x6F	; 111
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	8d 93       	st	X+, r24
    2306:	9c 93       	st	X, r25
    2308:	fe 01       	movw	r30, r28
    230a:	e3 57       	subi	r30, 0x73	; 115
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <main+0x61c>
    2316:	fe 01       	movw	r30, r28
    2318:	e3 57       	subi	r30, 0x73	; 115
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
	_delay_ms(10);

	Eeprom_u8ReadByte(0,3,&Rec_Byte);
    2320:	9e 01       	movw	r18, r28
    2322:	2b 53       	subi	r18, 0x3B	; 59
    2324:	3f 4f       	sbci	r19, 0xFF	; 255
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	63 e0       	ldi	r22, 0x03	; 3
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	a9 01       	movw	r20, r18
    232e:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
	LCD_VidSendData(Rec_Byte);
    2332:	fe 01       	movw	r30, r28
    2334:	eb 53       	subi	r30, 0x3B	; 59
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    233e:	fe 01       	movw	r30, r28
    2340:	e7 57       	subi	r30, 0x77	; 119
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a0 e2       	ldi	r26, 0x20	; 32
    234a:	b1 e4       	ldi	r27, 0x41	; 65
    234c:	80 83       	st	Z, r24
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	a2 83       	std	Z+2, r26	; 0x02
    2352:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2354:	8e 01       	movw	r16, r28
    2356:	0b 57       	subi	r16, 0x7B	; 123
    2358:	1f 4f       	sbci	r17, 0xFF	; 255
    235a:	fe 01       	movw	r30, r28
    235c:	e7 57       	subi	r30, 0x77	; 119
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	60 81       	ld	r22, Z
    2362:	71 81       	ldd	r23, Z+1	; 0x01
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	93 81       	ldd	r25, Z+3	; 0x03
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	4a ef       	ldi	r20, 0xFA	; 250
    236e:	54 e4       	ldi	r21, 0x44	; 68
    2370:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	f8 01       	movw	r30, r16
    237a:	80 83       	st	Z, r24
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	a2 83       	std	Z+2, r26	; 0x02
    2380:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2382:	fe 01       	movw	r30, r28
    2384:	eb 57       	subi	r30, 0x7B	; 123
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    239c:	88 23       	and	r24, r24
    239e:	44 f4       	brge	.+16     	; 0x23b0 <main+0x6ba>
		__ticks = 1;
    23a0:	fe 01       	movw	r30, r28
    23a2:	ed 57       	subi	r30, 0x7D	; 125
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
    23ae:	64 c0       	rjmp	.+200    	; 0x2478 <main+0x782>
	else if (__tmp > 65535)
    23b0:	fe 01       	movw	r30, r28
    23b2:	eb 57       	subi	r30, 0x7B	; 123
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	60 81       	ld	r22, Z
    23b8:	71 81       	ldd	r23, Z+1	; 0x01
    23ba:	82 81       	ldd	r24, Z+2	; 0x02
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	0c f0       	brlt	.+2      	; 0x23d0 <main+0x6da>
    23ce:	43 c0       	rjmp	.+134    	; 0x2456 <main+0x760>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d0:	fe 01       	movw	r30, r28
    23d2:	e7 57       	subi	r30, 0x77	; 119
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e2       	ldi	r20, 0x20	; 32
    23e4:	51 e4       	ldi	r21, 0x41	; 65
    23e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	8e 01       	movw	r16, r28
    23f0:	0d 57       	subi	r16, 0x7D	; 125
    23f2:	1f 4f       	sbci	r17, 0xFF	; 255
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	f8 01       	movw	r30, r16
    2402:	91 83       	std	Z+1, r25	; 0x01
    2404:	80 83       	st	Z, r24
    2406:	1f c0       	rjmp	.+62     	; 0x2446 <main+0x750>
    2408:	fe 01       	movw	r30, r28
    240a:	ef 57       	subi	r30, 0x7F	; 127
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	88 ec       	ldi	r24, 0xC8	; 200
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
    2416:	fe 01       	movw	r30, r28
    2418:	ef 57       	subi	r30, 0x7F	; 127
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <main+0x72a>
    2424:	fe 01       	movw	r30, r28
    2426:	ef 57       	subi	r30, 0x7F	; 127
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	91 83       	std	Z+1, r25	; 0x01
    242c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242e:	de 01       	movw	r26, r28
    2430:	ad 57       	subi	r26, 0x7D	; 125
    2432:	bf 4f       	sbci	r27, 0xFF	; 255
    2434:	fe 01       	movw	r30, r28
    2436:	ed 57       	subi	r30, 0x7D	; 125
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	80 81       	ld	r24, Z
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	11 96       	adiw	r26, 0x01	; 1
    2442:	9c 93       	st	X, r25
    2444:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	fe 01       	movw	r30, r28
    2448:	ed 57       	subi	r30, 0x7D	; 125
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	91 81       	ldd	r25, Z+1	; 0x01
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	d1 f6       	brne	.-76     	; 0x2408 <main+0x712>
    2454:	27 c0       	rjmp	.+78     	; 0x24a4 <main+0x7ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	8e 01       	movw	r16, r28
    2458:	0d 57       	subi	r16, 0x7D	; 125
    245a:	1f 4f       	sbci	r17, 0xFF	; 255
    245c:	fe 01       	movw	r30, r28
    245e:	eb 57       	subi	r30, 0x7B	; 123
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	60 81       	ld	r22, Z
    2464:	71 81       	ldd	r23, Z+1	; 0x01
    2466:	82 81       	ldd	r24, Z+2	; 0x02
    2468:	93 81       	ldd	r25, Z+3	; 0x03
    246a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	f8 01       	movw	r30, r16
    2474:	91 83       	std	Z+1, r25	; 0x01
    2476:	80 83       	st	Z, r24
    2478:	de 01       	movw	r26, r28
    247a:	a1 58       	subi	r26, 0x81	; 129
    247c:	bf 4f       	sbci	r27, 0xFF	; 255
    247e:	fe 01       	movw	r30, r28
    2480:	ed 57       	subi	r30, 0x7D	; 125
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	8d 93       	st	X+, r24
    248a:	9c 93       	st	X, r25
    248c:	fe 01       	movw	r30, r28
    248e:	e1 58       	subi	r30, 0x81	; 129
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	80 81       	ld	r24, Z
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <main+0x7a0>
    249a:	fe 01       	movw	r30, r28
    249c:	e1 58       	subi	r30, 0x81	; 129
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
	_delay_ms(10);

	Eeprom_u8ReadByte(0,4,&Rec_Byte);
    24a4:	9e 01       	movw	r18, r28
    24a6:	2b 53       	subi	r18, 0x3B	; 59
    24a8:	3f 4f       	sbci	r19, 0xFF	; 255
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	64 e0       	ldi	r22, 0x04	; 4
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	a9 01       	movw	r20, r18
    24b2:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
	LCD_VidSendData(Rec_Byte);
    24b6:	fe 01       	movw	r30, r28
    24b8:	eb 53       	subi	r30, 0x3B	; 59
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	80 81       	ld	r24, Z
    24be:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    24c2:	fe 01       	movw	r30, r28
    24c4:	e5 58       	subi	r30, 0x85	; 133
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 e2       	ldi	r26, 0x20	; 32
    24ce:	b1 e4       	ldi	r27, 0x41	; 65
    24d0:	80 83       	st	Z, r24
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	a2 83       	std	Z+2, r26	; 0x02
    24d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d8:	8e 01       	movw	r16, r28
    24da:	09 58       	subi	r16, 0x89	; 137
    24dc:	1f 4f       	sbci	r17, 0xFF	; 255
    24de:	fe 01       	movw	r30, r28
    24e0:	e5 58       	subi	r30, 0x85	; 133
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	60 81       	ld	r22, Z
    24e6:	71 81       	ldd	r23, Z+1	; 0x01
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	93 81       	ldd	r25, Z+3	; 0x03
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	4a ef       	ldi	r20, 0xFA	; 250
    24f2:	54 e4       	ldi	r21, 0x44	; 68
    24f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	f8 01       	movw	r30, r16
    24fe:	80 83       	st	Z, r24
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	a2 83       	std	Z+2, r26	; 0x02
    2504:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2506:	fe 01       	movw	r30, r28
    2508:	e9 58       	subi	r30, 0x89	; 137
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	82 81       	ldd	r24, Z+2	; 0x02
    2512:	93 81       	ldd	r25, Z+3	; 0x03
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e8       	ldi	r20, 0x80	; 128
    251a:	5f e3       	ldi	r21, 0x3F	; 63
    251c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2520:	88 23       	and	r24, r24
    2522:	44 f4       	brge	.+16     	; 0x2534 <main+0x83e>
		__ticks = 1;
    2524:	fe 01       	movw	r30, r28
    2526:	eb 58       	subi	r30, 0x8B	; 139
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
    2532:	64 c0       	rjmp	.+200    	; 0x25fc <main+0x906>
	else if (__tmp > 65535)
    2534:	fe 01       	movw	r30, r28
    2536:	e9 58       	subi	r30, 0x89	; 137
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	60 81       	ld	r22, Z
    253c:	71 81       	ldd	r23, Z+1	; 0x01
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	93 81       	ldd	r25, Z+3	; 0x03
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	3f ef       	ldi	r19, 0xFF	; 255
    2546:	4f e7       	ldi	r20, 0x7F	; 127
    2548:	57 e4       	ldi	r21, 0x47	; 71
    254a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    254e:	18 16       	cp	r1, r24
    2550:	0c f0       	brlt	.+2      	; 0x2554 <main+0x85e>
    2552:	43 c0       	rjmp	.+134    	; 0x25da <main+0x8e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2554:	fe 01       	movw	r30, r28
    2556:	e5 58       	subi	r30, 0x85	; 133
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	60 81       	ld	r22, Z
    255c:	71 81       	ldd	r23, Z+1	; 0x01
    255e:	82 81       	ldd	r24, Z+2	; 0x02
    2560:	93 81       	ldd	r25, Z+3	; 0x03
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e2       	ldi	r20, 0x20	; 32
    2568:	51 e4       	ldi	r21, 0x41	; 65
    256a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	8e 01       	movw	r16, r28
    2574:	0b 58       	subi	r16, 0x8B	; 139
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	f8 01       	movw	r30, r16
    2586:	91 83       	std	Z+1, r25	; 0x01
    2588:	80 83       	st	Z, r24
    258a:	1f c0       	rjmp	.+62     	; 0x25ca <main+0x8d4>
    258c:	fe 01       	movw	r30, r28
    258e:	ed 58       	subi	r30, 0x8D	; 141
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	88 ec       	ldi	r24, 0xC8	; 200
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	80 83       	st	Z, r24
    259a:	fe 01       	movw	r30, r28
    259c:	ed 58       	subi	r30, 0x8D	; 141
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	80 81       	ld	r24, Z
    25a2:	91 81       	ldd	r25, Z+1	; 0x01
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <main+0x8ae>
    25a8:	fe 01       	movw	r30, r28
    25aa:	ed 58       	subi	r30, 0x8D	; 141
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	91 83       	std	Z+1, r25	; 0x01
    25b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b2:	de 01       	movw	r26, r28
    25b4:	ab 58       	subi	r26, 0x8B	; 139
    25b6:	bf 4f       	sbci	r27, 0xFF	; 255
    25b8:	fe 01       	movw	r30, r28
    25ba:	eb 58       	subi	r30, 0x8B	; 139
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 81       	ld	r24, Z
    25c0:	91 81       	ldd	r25, Z+1	; 0x01
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	11 96       	adiw	r26, 0x01	; 1
    25c6:	9c 93       	st	X, r25
    25c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ca:	fe 01       	movw	r30, r28
    25cc:	eb 58       	subi	r30, 0x8B	; 139
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	d1 f6       	brne	.-76     	; 0x258c <main+0x896>
    25d8:	27 c0       	rjmp	.+78     	; 0x2628 <main+0x932>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25da:	8e 01       	movw	r16, r28
    25dc:	0b 58       	subi	r16, 0x8B	; 139
    25de:	1f 4f       	sbci	r17, 0xFF	; 255
    25e0:	fe 01       	movw	r30, r28
    25e2:	e9 58       	subi	r30, 0x89	; 137
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	f8 01       	movw	r30, r16
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	80 83       	st	Z, r24
    25fc:	de 01       	movw	r26, r28
    25fe:	af 58       	subi	r26, 0x8F	; 143
    2600:	bf 4f       	sbci	r27, 0xFF	; 255
    2602:	fe 01       	movw	r30, r28
    2604:	eb 58       	subi	r30, 0x8B	; 139
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	80 81       	ld	r24, Z
    260a:	91 81       	ldd	r25, Z+1	; 0x01
    260c:	8d 93       	st	X+, r24
    260e:	9c 93       	st	X, r25
    2610:	fe 01       	movw	r30, r28
    2612:	ef 58       	subi	r30, 0x8F	; 143
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	80 81       	ld	r24, Z
    2618:	91 81       	ldd	r25, Z+1	; 0x01
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	f1 f7       	brne	.-4      	; 0x261a <main+0x924>
    261e:	fe 01       	movw	r30, r28
    2620:	ef 58       	subi	r30, 0x8F	; 143
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	91 83       	std	Z+1, r25	; 0x01
    2626:	80 83       	st	Z, r24
	_delay_ms(10);
	Eeprom_u8ReadByte(0,5,&Rec_Byte);
    2628:	9e 01       	movw	r18, r28
    262a:	2b 53       	subi	r18, 0x3B	; 59
    262c:	3f 4f       	sbci	r19, 0xFF	; 255
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	65 e0       	ldi	r22, 0x05	; 5
    2632:	70 e0       	ldi	r23, 0x00	; 0
    2634:	a9 01       	movw	r20, r18
    2636:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
		LCD_VidSendData(Rec_Byte);
    263a:	fe 01       	movw	r30, r28
    263c:	eb 53       	subi	r30, 0x3B	; 59
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 81       	ld	r24, Z
    2642:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    2646:	fe 01       	movw	r30, r28
    2648:	e3 59       	subi	r30, 0x93	; 147
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	a0 e2       	ldi	r26, 0x20	; 32
    2652:	b1 e4       	ldi	r27, 0x41	; 65
    2654:	80 83       	st	Z, r24
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	a2 83       	std	Z+2, r26	; 0x02
    265a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265c:	8e 01       	movw	r16, r28
    265e:	07 59       	subi	r16, 0x97	; 151
    2660:	1f 4f       	sbci	r17, 0xFF	; 255
    2662:	fe 01       	movw	r30, r28
    2664:	e3 59       	subi	r30, 0x93	; 147
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	60 81       	ld	r22, Z
    266a:	71 81       	ldd	r23, Z+1	; 0x01
    266c:	82 81       	ldd	r24, Z+2	; 0x02
    266e:	93 81       	ldd	r25, Z+3	; 0x03
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4a ef       	ldi	r20, 0xFA	; 250
    2676:	54 e4       	ldi	r21, 0x44	; 68
    2678:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	f8 01       	movw	r30, r16
    2682:	80 83       	st	Z, r24
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	a2 83       	std	Z+2, r26	; 0x02
    2688:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    268a:	fe 01       	movw	r30, r28
    268c:	e7 59       	subi	r30, 0x97	; 151
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	60 81       	ld	r22, Z
    2692:	71 81       	ldd	r23, Z+1	; 0x01
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e8       	ldi	r20, 0x80	; 128
    269e:	5f e3       	ldi	r21, 0x3F	; 63
    26a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26a4:	88 23       	and	r24, r24
    26a6:	44 f4       	brge	.+16     	; 0x26b8 <main+0x9c2>
		__ticks = 1;
    26a8:	fe 01       	movw	r30, r28
    26aa:	e9 59       	subi	r30, 0x99	; 153
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	80 83       	st	Z, r24
    26b6:	64 c0       	rjmp	.+200    	; 0x2780 <main+0xa8a>
	else if (__tmp > 65535)
    26b8:	fe 01       	movw	r30, r28
    26ba:	e7 59       	subi	r30, 0x97	; 151
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	60 81       	ld	r22, Z
    26c0:	71 81       	ldd	r23, Z+1	; 0x01
    26c2:	82 81       	ldd	r24, Z+2	; 0x02
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	3f ef       	ldi	r19, 0xFF	; 255
    26ca:	4f e7       	ldi	r20, 0x7F	; 127
    26cc:	57 e4       	ldi	r21, 0x47	; 71
    26ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26d2:	18 16       	cp	r1, r24
    26d4:	0c f0       	brlt	.+2      	; 0x26d8 <main+0x9e2>
    26d6:	43 c0       	rjmp	.+134    	; 0x275e <main+0xa68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	fe 01       	movw	r30, r28
    26da:	e3 59       	subi	r30, 0x93	; 147
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	60 81       	ld	r22, Z
    26e0:	71 81       	ldd	r23, Z+1	; 0x01
    26e2:	82 81       	ldd	r24, Z+2	; 0x02
    26e4:	93 81       	ldd	r25, Z+3	; 0x03
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e2       	ldi	r20, 0x20	; 32
    26ec:	51 e4       	ldi	r21, 0x41	; 65
    26ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	8e 01       	movw	r16, r28
    26f8:	09 59       	subi	r16, 0x99	; 153
    26fa:	1f 4f       	sbci	r17, 0xFF	; 255
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	f8 01       	movw	r30, r16
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
    270e:	1f c0       	rjmp	.+62     	; 0x274e <main+0xa58>
    2710:	fe 01       	movw	r30, r28
    2712:	eb 59       	subi	r30, 0x9B	; 155
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	88 ec       	ldi	r24, 0xC8	; 200
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
    271e:	fe 01       	movw	r30, r28
    2720:	eb 59       	subi	r30, 0x9B	; 155
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 81       	ld	r24, Z
    2726:	91 81       	ldd	r25, Z+1	; 0x01
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <main+0xa32>
    272c:	fe 01       	movw	r30, r28
    272e:	eb 59       	subi	r30, 0x9B	; 155
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2736:	de 01       	movw	r26, r28
    2738:	a9 59       	subi	r26, 0x99	; 153
    273a:	bf 4f       	sbci	r27, 0xFF	; 255
    273c:	fe 01       	movw	r30, r28
    273e:	e9 59       	subi	r30, 0x99	; 153
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	11 96       	adiw	r26, 0x01	; 1
    274a:	9c 93       	st	X, r25
    274c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274e:	fe 01       	movw	r30, r28
    2750:	e9 59       	subi	r30, 0x99	; 153
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	80 81       	ld	r24, Z
    2756:	91 81       	ldd	r25, Z+1	; 0x01
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	d1 f6       	brne	.-76     	; 0x2710 <main+0xa1a>
    275c:	27 c0       	rjmp	.+78     	; 0x27ac <main+0xab6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275e:	8e 01       	movw	r16, r28
    2760:	09 59       	subi	r16, 0x99	; 153
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
    2764:	fe 01       	movw	r30, r28
    2766:	e7 59       	subi	r30, 0x97	; 151
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	60 81       	ld	r22, Z
    276c:	71 81       	ldd	r23, Z+1	; 0x01
    276e:	82 81       	ldd	r24, Z+2	; 0x02
    2770:	93 81       	ldd	r25, Z+3	; 0x03
    2772:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	f8 01       	movw	r30, r16
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	80 83       	st	Z, r24
    2780:	de 01       	movw	r26, r28
    2782:	ad 59       	subi	r26, 0x9D	; 157
    2784:	bf 4f       	sbci	r27, 0xFF	; 255
    2786:	fe 01       	movw	r30, r28
    2788:	e9 59       	subi	r30, 0x99	; 153
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 81       	ld	r24, Z
    278e:	91 81       	ldd	r25, Z+1	; 0x01
    2790:	8d 93       	st	X+, r24
    2792:	9c 93       	st	X, r25
    2794:	fe 01       	movw	r30, r28
    2796:	ed 59       	subi	r30, 0x9D	; 157
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	91 81       	ldd	r25, Z+1	; 0x01
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <main+0xaa8>
    27a2:	fe 01       	movw	r30, r28
    27a4:	ed 59       	subi	r30, 0x9D	; 157
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	91 83       	std	Z+1, r25	; 0x01
    27aa:	80 83       	st	Z, r24
		_delay_ms(10);
		Eeprom_u8ReadByte(0,6,&Rec_Byte);
    27ac:	9e 01       	movw	r18, r28
    27ae:	2b 53       	subi	r18, 0x3B	; 59
    27b0:	3f 4f       	sbci	r19, 0xFF	; 255
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	66 e0       	ldi	r22, 0x06	; 6
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	a9 01       	movw	r20, r18
    27ba:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
			LCD_VidSendData(Rec_Byte);
    27be:	fe 01       	movw	r30, r28
    27c0:	eb 53       	subi	r30, 0x3B	; 59
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	80 81       	ld	r24, Z
    27c6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    27ca:	fe 01       	movw	r30, r28
    27cc:	e1 5a       	subi	r30, 0xA1	; 161
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	a0 e2       	ldi	r26, 0x20	; 32
    27d6:	b1 e4       	ldi	r27, 0x41	; 65
    27d8:	80 83       	st	Z, r24
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	a2 83       	std	Z+2, r26	; 0x02
    27de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e0:	8e 01       	movw	r16, r28
    27e2:	05 5a       	subi	r16, 0xA5	; 165
    27e4:	1f 4f       	sbci	r17, 0xFF	; 255
    27e6:	fe 01       	movw	r30, r28
    27e8:	e1 5a       	subi	r30, 0xA1	; 161
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	60 81       	ld	r22, Z
    27ee:	71 81       	ldd	r23, Z+1	; 0x01
    27f0:	82 81       	ldd	r24, Z+2	; 0x02
    27f2:	93 81       	ldd	r25, Z+3	; 0x03
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	4a ef       	ldi	r20, 0xFA	; 250
    27fa:	54 e4       	ldi	r21, 0x44	; 68
    27fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	f8 01       	movw	r30, r16
    2806:	80 83       	st	Z, r24
    2808:	91 83       	std	Z+1, r25	; 0x01
    280a:	a2 83       	std	Z+2, r26	; 0x02
    280c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    280e:	fe 01       	movw	r30, r28
    2810:	e5 5a       	subi	r30, 0xA5	; 165
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	60 81       	ld	r22, Z
    2816:	71 81       	ldd	r23, Z+1	; 0x01
    2818:	82 81       	ldd	r24, Z+2	; 0x02
    281a:	93 81       	ldd	r25, Z+3	; 0x03
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e8       	ldi	r20, 0x80	; 128
    2822:	5f e3       	ldi	r21, 0x3F	; 63
    2824:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2828:	88 23       	and	r24, r24
    282a:	44 f4       	brge	.+16     	; 0x283c <main+0xb46>
		__ticks = 1;
    282c:	fe 01       	movw	r30, r28
    282e:	e7 5a       	subi	r30, 0xA7	; 167
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	80 83       	st	Z, r24
    283a:	64 c0       	rjmp	.+200    	; 0x2904 <main+0xc0e>
	else if (__tmp > 65535)
    283c:	fe 01       	movw	r30, r28
    283e:	e5 5a       	subi	r30, 0xA5	; 165
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	3f ef       	ldi	r19, 0xFF	; 255
    284e:	4f e7       	ldi	r20, 0x7F	; 127
    2850:	57 e4       	ldi	r21, 0x47	; 71
    2852:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2856:	18 16       	cp	r1, r24
    2858:	0c f0       	brlt	.+2      	; 0x285c <main+0xb66>
    285a:	43 c0       	rjmp	.+134    	; 0x28e2 <main+0xbec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	fe 01       	movw	r30, r28
    285e:	e1 5a       	subi	r30, 0xA1	; 161
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8e 01       	movw	r16, r28
    287c:	07 5a       	subi	r16, 0xA7	; 167
    287e:	1f 4f       	sbci	r17, 0xFF	; 255
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	f8 01       	movw	r30, r16
    288e:	91 83       	std	Z+1, r25	; 0x01
    2890:	80 83       	st	Z, r24
    2892:	1f c0       	rjmp	.+62     	; 0x28d2 <main+0xbdc>
    2894:	fe 01       	movw	r30, r28
    2896:	e9 5a       	subi	r30, 0xA9	; 169
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	88 ec       	ldi	r24, 0xC8	; 200
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	80 83       	st	Z, r24
    28a2:	fe 01       	movw	r30, r28
    28a4:	e9 5a       	subi	r30, 0xA9	; 169
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	80 81       	ld	r24, Z
    28aa:	91 81       	ldd	r25, Z+1	; 0x01
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <main+0xbb6>
    28b0:	fe 01       	movw	r30, r28
    28b2:	e9 5a       	subi	r30, 0xA9	; 169
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ba:	de 01       	movw	r26, r28
    28bc:	a7 5a       	subi	r26, 0xA7	; 167
    28be:	bf 4f       	sbci	r27, 0xFF	; 255
    28c0:	fe 01       	movw	r30, r28
    28c2:	e7 5a       	subi	r30, 0xA7	; 167
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	80 81       	ld	r24, Z
    28c8:	91 81       	ldd	r25, Z+1	; 0x01
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	11 96       	adiw	r26, 0x01	; 1
    28ce:	9c 93       	st	X, r25
    28d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d2:	fe 01       	movw	r30, r28
    28d4:	e7 5a       	subi	r30, 0xA7	; 167
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 81       	ld	r24, Z
    28da:	91 81       	ldd	r25, Z+1	; 0x01
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	d1 f6       	brne	.-76     	; 0x2894 <main+0xb9e>
    28e0:	27 c0       	rjmp	.+78     	; 0x2930 <main+0xc3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e2:	8e 01       	movw	r16, r28
    28e4:	07 5a       	subi	r16, 0xA7	; 167
    28e6:	1f 4f       	sbci	r17, 0xFF	; 255
    28e8:	fe 01       	movw	r30, r28
    28ea:	e5 5a       	subi	r30, 0xA5	; 165
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	60 81       	ld	r22, Z
    28f0:	71 81       	ldd	r23, Z+1	; 0x01
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	93 81       	ldd	r25, Z+3	; 0x03
    28f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	f8 01       	movw	r30, r16
    2900:	91 83       	std	Z+1, r25	; 0x01
    2902:	80 83       	st	Z, r24
    2904:	de 01       	movw	r26, r28
    2906:	ab 5a       	subi	r26, 0xAB	; 171
    2908:	bf 4f       	sbci	r27, 0xFF	; 255
    290a:	fe 01       	movw	r30, r28
    290c:	e7 5a       	subi	r30, 0xA7	; 167
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	8d 93       	st	X+, r24
    2916:	9c 93       	st	X, r25
    2918:	fe 01       	movw	r30, r28
    291a:	eb 5a       	subi	r30, 0xAB	; 171
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <main+0xc2c>
    2926:	fe 01       	movw	r30, r28
    2928:	eb 5a       	subi	r30, 0xAB	; 171
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	91 83       	std	Z+1, r25	; 0x01
    292e:	80 83       	st	Z, r24
			_delay_ms(10);
			Eeprom_u8ReadByte(0,7,&Rec_Byte);
    2930:	9e 01       	movw	r18, r28
    2932:	2b 53       	subi	r18, 0x3B	; 59
    2934:	3f 4f       	sbci	r19, 0xFF	; 255
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	67 e0       	ldi	r22, 0x07	; 7
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	a9 01       	movw	r20, r18
    293e:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
				LCD_VidSendData(Rec_Byte);
    2942:	fe 01       	movw	r30, r28
    2944:	eb 53       	subi	r30, 0x3B	; 59
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	80 81       	ld	r24, Z
    294a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    294e:	fe 01       	movw	r30, r28
    2950:	ef 5a       	subi	r30, 0xAF	; 175
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	a0 e2       	ldi	r26, 0x20	; 32
    295a:	b1 e4       	ldi	r27, 0x41	; 65
    295c:	80 83       	st	Z, r24
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	a2 83       	std	Z+2, r26	; 0x02
    2962:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2964:	8e 01       	movw	r16, r28
    2966:	03 5b       	subi	r16, 0xB3	; 179
    2968:	1f 4f       	sbci	r17, 0xFF	; 255
    296a:	fe 01       	movw	r30, r28
    296c:	ef 5a       	subi	r30, 0xAF	; 175
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	93 81       	ldd	r25, Z+3	; 0x03
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	4a ef       	ldi	r20, 0xFA	; 250
    297e:	54 e4       	ldi	r21, 0x44	; 68
    2980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	f8 01       	movw	r30, r16
    298a:	80 83       	st	Z, r24
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	a2 83       	std	Z+2, r26	; 0x02
    2990:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2992:	fe 01       	movw	r30, r28
    2994:	e3 5b       	subi	r30, 0xB3	; 179
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e8       	ldi	r20, 0x80	; 128
    29a6:	5f e3       	ldi	r21, 0x3F	; 63
    29a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29ac:	88 23       	and	r24, r24
    29ae:	44 f4       	brge	.+16     	; 0x29c0 <main+0xcca>
		__ticks = 1;
    29b0:	fe 01       	movw	r30, r28
    29b2:	e5 5b       	subi	r30, 0xB5	; 181
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	80 83       	st	Z, r24
    29be:	64 c0       	rjmp	.+200    	; 0x2a88 <main+0xd92>
	else if (__tmp > 65535)
    29c0:	fe 01       	movw	r30, r28
    29c2:	e3 5b       	subi	r30, 0xB3	; 179
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	60 81       	ld	r22, Z
    29c8:	71 81       	ldd	r23, Z+1	; 0x01
    29ca:	82 81       	ldd	r24, Z+2	; 0x02
    29cc:	93 81       	ldd	r25, Z+3	; 0x03
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	3f ef       	ldi	r19, 0xFF	; 255
    29d2:	4f e7       	ldi	r20, 0x7F	; 127
    29d4:	57 e4       	ldi	r21, 0x47	; 71
    29d6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29da:	18 16       	cp	r1, r24
    29dc:	0c f0       	brlt	.+2      	; 0x29e0 <main+0xcea>
    29de:	43 c0       	rjmp	.+134    	; 0x2a66 <main+0xd70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e0:	fe 01       	movw	r30, r28
    29e2:	ef 5a       	subi	r30, 0xAF	; 175
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e2       	ldi	r20, 0x20	; 32
    29f4:	51 e4       	ldi	r21, 0x41	; 65
    29f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	8e 01       	movw	r16, r28
    2a00:	05 5b       	subi	r16, 0xB5	; 181
    2a02:	1f 4f       	sbci	r17, 0xFF	; 255
    2a04:	bc 01       	movw	r22, r24
    2a06:	cd 01       	movw	r24, r26
    2a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	f8 01       	movw	r30, r16
    2a12:	91 83       	std	Z+1, r25	; 0x01
    2a14:	80 83       	st	Z, r24
    2a16:	1f c0       	rjmp	.+62     	; 0x2a56 <main+0xd60>
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e7 5b       	subi	r30, 0xB7	; 183
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	88 ec       	ldi	r24, 0xC8	; 200
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	80 83       	st	Z, r24
    2a26:	fe 01       	movw	r30, r28
    2a28:	e7 5b       	subi	r30, 0xB7	; 183
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	91 81       	ldd	r25, Z+1	; 0x01
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <main+0xd3a>
    2a34:	fe 01       	movw	r30, r28
    2a36:	e7 5b       	subi	r30, 0xB7	; 183
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3e:	de 01       	movw	r26, r28
    2a40:	a5 5b       	subi	r26, 0xB5	; 181
    2a42:	bf 4f       	sbci	r27, 0xFF	; 255
    2a44:	fe 01       	movw	r30, r28
    2a46:	e5 5b       	subi	r30, 0xB5	; 181
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 81       	ld	r24, Z
    2a4c:	91 81       	ldd	r25, Z+1	; 0x01
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	11 96       	adiw	r26, 0x01	; 1
    2a52:	9c 93       	st	X, r25
    2a54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a56:	fe 01       	movw	r30, r28
    2a58:	e5 5b       	subi	r30, 0xB5	; 181
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 81       	ld	r24, Z
    2a5e:	91 81       	ldd	r25, Z+1	; 0x01
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	d1 f6       	brne	.-76     	; 0x2a18 <main+0xd22>
    2a64:	27 c0       	rjmp	.+78     	; 0x2ab4 <main+0xdbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a66:	8e 01       	movw	r16, r28
    2a68:	05 5b       	subi	r16, 0xB5	; 181
    2a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e3 5b       	subi	r30, 0xB3	; 179
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	60 81       	ld	r22, Z
    2a74:	71 81       	ldd	r23, Z+1	; 0x01
    2a76:	82 81       	ldd	r24, Z+2	; 0x02
    2a78:	93 81       	ldd	r25, Z+3	; 0x03
    2a7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	f8 01       	movw	r30, r16
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	80 83       	st	Z, r24
    2a88:	de 01       	movw	r26, r28
    2a8a:	a9 5b       	subi	r26, 0xB9	; 185
    2a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e5 5b       	subi	r30, 0xB5	; 181
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	8d 93       	st	X+, r24
    2a9a:	9c 93       	st	X, r25
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e9 5b       	subi	r30, 0xB9	; 185
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 81       	ld	r24, Z
    2aa4:	91 81       	ldd	r25, Z+1	; 0x01
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <main+0xdb0>
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e9 5b       	subi	r30, 0xB9	; 185
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	80 83       	st	Z, r24
				_delay_ms(10);
				Eeprom_u8ReadByte(0,8,&Rec_Byte);
    2ab4:	9e 01       	movw	r18, r28
    2ab6:	2b 53       	subi	r18, 0x3B	; 59
    2ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	68 e0       	ldi	r22, 0x08	; 8
    2abe:	70 e0       	ldi	r23, 0x00	; 0
    2ac0:	a9 01       	movw	r20, r18
    2ac2:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
					LCD_VidSendData(Rec_Byte);
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	eb 53       	subi	r30, 0x3B	; 59
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 81       	ld	r24, Z
    2ace:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ed 5b       	subi	r30, 0xBD	; 189
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	a0 e2       	ldi	r26, 0x20	; 32
    2ade:	b1 e4       	ldi	r27, 0x41	; 65
    2ae0:	80 83       	st	Z, r24
    2ae2:	91 83       	std	Z+1, r25	; 0x01
    2ae4:	a2 83       	std	Z+2, r26	; 0x02
    2ae6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae8:	8e 01       	movw	r16, r28
    2aea:	01 5c       	subi	r16, 0xC1	; 193
    2aec:	1f 4f       	sbci	r17, 0xFF	; 255
    2aee:	fe 01       	movw	r30, r28
    2af0:	ed 5b       	subi	r30, 0xBD	; 189
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	4a ef       	ldi	r20, 0xFA	; 250
    2b02:	54 e4       	ldi	r21, 0x44	; 68
    2b04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	f8 01       	movw	r30, r16
    2b0e:	80 83       	st	Z, r24
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	a2 83       	std	Z+2, r26	; 0x02
    2b14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b16:	fe 01       	movw	r30, r28
    2b18:	ff 96       	adiw	r30, 0x3f	; 63
    2b1a:	60 81       	ld	r22, Z
    2b1c:	71 81       	ldd	r23, Z+1	; 0x01
    2b1e:	82 81       	ldd	r24, Z+2	; 0x02
    2b20:	93 81       	ldd	r25, Z+3	; 0x03
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e8       	ldi	r20, 0x80	; 128
    2b28:	5f e3       	ldi	r21, 0x3F	; 63
    2b2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b2e:	88 23       	and	r24, r24
    2b30:	2c f4       	brge	.+10     	; 0x2b3c <main+0xe46>
		__ticks = 1;
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9e af       	std	Y+62, r25	; 0x3e
    2b38:	8d af       	std	Y+61, r24	; 0x3d
    2b3a:	46 c0       	rjmp	.+140    	; 0x2bc8 <main+0xed2>
	else if (__tmp > 65535)
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ff 96       	adiw	r30, 0x3f	; 63
    2b40:	60 81       	ld	r22, Z
    2b42:	71 81       	ldd	r23, Z+1	; 0x01
    2b44:	82 81       	ldd	r24, Z+2	; 0x02
    2b46:	93 81       	ldd	r25, Z+3	; 0x03
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	3f ef       	ldi	r19, 0xFF	; 255
    2b4c:	4f e7       	ldi	r20, 0x7F	; 127
    2b4e:	57 e4       	ldi	r21, 0x47	; 71
    2b50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b54:	18 16       	cp	r1, r24
    2b56:	64 f5       	brge	.+88     	; 0x2bb0 <main+0xeba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b58:	fe 01       	movw	r30, r28
    2b5a:	ed 5b       	subi	r30, 0xBD	; 189
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	60 81       	ld	r22, Z
    2b60:	71 81       	ldd	r23, Z+1	; 0x01
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	93 81       	ldd	r25, Z+3	; 0x03
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	40 e2       	ldi	r20, 0x20	; 32
    2b6c:	51 e4       	ldi	r21, 0x41	; 65
    2b6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	bc 01       	movw	r22, r24
    2b78:	cd 01       	movw	r24, r26
    2b7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	9e af       	std	Y+62, r25	; 0x3e
    2b84:	8d af       	std	Y+61, r24	; 0x3d
    2b86:	0f c0       	rjmp	.+30     	; 0x2ba6 <main+0xeb0>
    2b88:	88 ec       	ldi	r24, 0xC8	; 200
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	9c af       	std	Y+60, r25	; 0x3c
    2b8e:	8b af       	std	Y+59, r24	; 0x3b
    2b90:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b92:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	f1 f7       	brne	.-4      	; 0x2b94 <main+0xe9e>
    2b98:	9c af       	std	Y+60, r25	; 0x3c
    2b9a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	9e af       	std	Y+62, r25	; 0x3e
    2ba4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ba8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	69 f7       	brne	.-38     	; 0x2b88 <main+0xe92>
    2bae:	16 c0       	rjmp	.+44     	; 0x2bdc <main+0xee6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	ff 96       	adiw	r30, 0x3f	; 63
    2bb4:	60 81       	ld	r22, Z
    2bb6:	71 81       	ldd	r23, Z+1	; 0x01
    2bb8:	82 81       	ldd	r24, Z+2	; 0x02
    2bba:	93 81       	ldd	r25, Z+3	; 0x03
    2bbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9e af       	std	Y+62, r25	; 0x3e
    2bc6:	8d af       	std	Y+61, r24	; 0x3d
    2bc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bca:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bcc:	9a af       	std	Y+58, r25	; 0x3a
    2bce:	89 af       	std	Y+57, r24	; 0x39
    2bd0:	89 ad       	ldd	r24, Y+57	; 0x39
    2bd2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <main+0xede>
    2bd8:	9a af       	std	Y+58, r25	; 0x3a
    2bda:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(10);
					Eeprom_u8ReadByte(0,9,&Rec_Byte);
    2bdc:	9e 01       	movw	r18, r28
    2bde:	2b 53       	subi	r18, 0x3B	; 59
    2be0:	3f 4f       	sbci	r19, 0xFF	; 255
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	69 e0       	ldi	r22, 0x09	; 9
    2be6:	70 e0       	ldi	r23, 0x00	; 0
    2be8:	a9 01       	movw	r20, r18
    2bea:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
						LCD_VidSendData(Rec_Byte);
    2bee:	fe 01       	movw	r30, r28
    2bf0:	eb 53       	subi	r30, 0x3B	; 59
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	80 81       	ld	r24, Z
    2bf6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	a0 e2       	ldi	r26, 0x20	; 32
    2c00:	b1 e4       	ldi	r27, 0x41	; 65
    2c02:	8d ab       	std	Y+53, r24	; 0x35
    2c04:	9e ab       	std	Y+54, r25	; 0x36
    2c06:	af ab       	std	Y+55, r26	; 0x37
    2c08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c0a:	6d a9       	ldd	r22, Y+53	; 0x35
    2c0c:	7e a9       	ldd	r23, Y+54	; 0x36
    2c0e:	8f a9       	ldd	r24, Y+55	; 0x37
    2c10:	98 ad       	ldd	r25, Y+56	; 0x38
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	4a ef       	ldi	r20, 0xFA	; 250
    2c18:	54 e4       	ldi	r21, 0x44	; 68
    2c1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	89 ab       	std	Y+49, r24	; 0x31
    2c24:	9a ab       	std	Y+50, r25	; 0x32
    2c26:	ab ab       	std	Y+51, r26	; 0x33
    2c28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c30:	9c a9       	ldd	r25, Y+52	; 0x34
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e8       	ldi	r20, 0x80	; 128
    2c38:	5f e3       	ldi	r21, 0x3F	; 63
    2c3a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c3e:	88 23       	and	r24, r24
    2c40:	2c f4       	brge	.+10     	; 0x2c4c <main+0xf56>
		__ticks = 1;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	98 ab       	std	Y+48, r25	; 0x30
    2c48:	8f a7       	std	Y+47, r24	; 0x2f
    2c4a:	3f c0       	rjmp	.+126    	; 0x2cca <main+0xfd4>
	else if (__tmp > 65535)
    2c4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c50:	8b a9       	ldd	r24, Y+51	; 0x33
    2c52:	9c a9       	ldd	r25, Y+52	; 0x34
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	3f ef       	ldi	r19, 0xFF	; 255
    2c58:	4f e7       	ldi	r20, 0x7F	; 127
    2c5a:	57 e4       	ldi	r21, 0x47	; 71
    2c5c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c60:	18 16       	cp	r1, r24
    2c62:	4c f5       	brge	.+82     	; 0x2cb6 <main+0xfc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c64:	6d a9       	ldd	r22, Y+53	; 0x35
    2c66:	7e a9       	ldd	r23, Y+54	; 0x36
    2c68:	8f a9       	ldd	r24, Y+55	; 0x37
    2c6a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e2       	ldi	r20, 0x20	; 32
    2c72:	51 e4       	ldi	r21, 0x41	; 65
    2c74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	bc 01       	movw	r22, r24
    2c7e:	cd 01       	movw	r24, r26
    2c80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	98 ab       	std	Y+48, r25	; 0x30
    2c8a:	8f a7       	std	Y+47, r24	; 0x2f
    2c8c:	0f c0       	rjmp	.+30     	; 0x2cac <main+0xfb6>
    2c8e:	88 ec       	ldi	r24, 0xC8	; 200
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	9e a7       	std	Y+46, r25	; 0x2e
    2c94:	8d a7       	std	Y+45, r24	; 0x2d
    2c96:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c98:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	f1 f7       	brne	.-4      	; 0x2c9a <main+0xfa4>
    2c9e:	9e a7       	std	Y+46, r25	; 0x2e
    2ca0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ca4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	98 ab       	std	Y+48, r25	; 0x30
    2caa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cae:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb0:	00 97       	sbiw	r24, 0x00	; 0
    2cb2:	69 f7       	brne	.-38     	; 0x2c8e <main+0xf98>
    2cb4:	14 c0       	rjmp	.+40     	; 0x2cde <main+0xfe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb6:	69 a9       	ldd	r22, Y+49	; 0x31
    2cb8:	7a a9       	ldd	r23, Y+50	; 0x32
    2cba:	8b a9       	ldd	r24, Y+51	; 0x33
    2cbc:	9c a9       	ldd	r25, Y+52	; 0x34
    2cbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	98 ab       	std	Y+48, r25	; 0x30
    2cc8:	8f a7       	std	Y+47, r24	; 0x2f
    2cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cce:	9c a7       	std	Y+44, r25	; 0x2c
    2cd0:	8b a7       	std	Y+43, r24	; 0x2b
    2cd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <main+0xfe0>
    2cda:	9c a7       	std	Y+44, r25	; 0x2c
    2cdc:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(10);
						Eeprom_u8ReadByte(0,10,&Rec_Byte);
    2cde:	9e 01       	movw	r18, r28
    2ce0:	2b 53       	subi	r18, 0x3B	; 59
    2ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	6a e0       	ldi	r22, 0x0A	; 10
    2ce8:	70 e0       	ldi	r23, 0x00	; 0
    2cea:	a9 01       	movw	r20, r18
    2cec:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
							LCD_VidSendData(Rec_Byte);
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	eb 53       	subi	r30, 0x3B	; 59
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 81       	ld	r24, Z
    2cf8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	a0 e2       	ldi	r26, 0x20	; 32
    2d02:	b1 e4       	ldi	r27, 0x41	; 65
    2d04:	8f a3       	std	Y+39, r24	; 0x27
    2d06:	98 a7       	std	Y+40, r25	; 0x28
    2d08:	a9 a7       	std	Y+41, r26	; 0x29
    2d0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d0e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d10:	89 a5       	ldd	r24, Y+41	; 0x29
    2d12:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	4a ef       	ldi	r20, 0xFA	; 250
    2d1a:	54 e4       	ldi	r21, 0x44	; 68
    2d1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	8b a3       	std	Y+35, r24	; 0x23
    2d26:	9c a3       	std	Y+36, r25	; 0x24
    2d28:	ad a3       	std	Y+37, r26	; 0x25
    2d2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d30:	8d a1       	ldd	r24, Y+37	; 0x25
    2d32:	9e a1       	ldd	r25, Y+38	; 0x26
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e8       	ldi	r20, 0x80	; 128
    2d3a:	5f e3       	ldi	r21, 0x3F	; 63
    2d3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d40:	88 23       	and	r24, r24
    2d42:	2c f4       	brge	.+10     	; 0x2d4e <main+0x1058>
		__ticks = 1;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9a a3       	std	Y+34, r25	; 0x22
    2d4a:	89 a3       	std	Y+33, r24	; 0x21
    2d4c:	3f c0       	rjmp	.+126    	; 0x2dcc <main+0x10d6>
	else if (__tmp > 65535)
    2d4e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d50:	7c a1       	ldd	r23, Y+36	; 0x24
    2d52:	8d a1       	ldd	r24, Y+37	; 0x25
    2d54:	9e a1       	ldd	r25, Y+38	; 0x26
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	3f ef       	ldi	r19, 0xFF	; 255
    2d5a:	4f e7       	ldi	r20, 0x7F	; 127
    2d5c:	57 e4       	ldi	r21, 0x47	; 71
    2d5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d62:	18 16       	cp	r1, r24
    2d64:	4c f5       	brge	.+82     	; 0x2db8 <main+0x10c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d66:	6f a1       	ldd	r22, Y+39	; 0x27
    2d68:	78 a5       	ldd	r23, Y+40	; 0x28
    2d6a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e2       	ldi	r20, 0x20	; 32
    2d74:	51 e4       	ldi	r21, 0x41	; 65
    2d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	9a a3       	std	Y+34, r25	; 0x22
    2d8c:	89 a3       	std	Y+33, r24	; 0x21
    2d8e:	0f c0       	rjmp	.+30     	; 0x2dae <main+0x10b8>
    2d90:	88 ec       	ldi	r24, 0xC8	; 200
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	98 a3       	std	Y+32, r25	; 0x20
    2d96:	8f 8f       	std	Y+31, r24	; 0x1f
    2d98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d9a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <main+0x10a6>
    2da0:	98 a3       	std	Y+32, r25	; 0x20
    2da2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da4:	89 a1       	ldd	r24, Y+33	; 0x21
    2da6:	9a a1       	ldd	r25, Y+34	; 0x22
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	9a a3       	std	Y+34, r25	; 0x22
    2dac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	89 a1       	ldd	r24, Y+33	; 0x21
    2db0:	9a a1       	ldd	r25, Y+34	; 0x22
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	69 f7       	brne	.-38     	; 0x2d90 <main+0x109a>
    2db6:	14 c0       	rjmp	.+40     	; 0x2de0 <main+0x10ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dba:	7c a1       	ldd	r23, Y+36	; 0x24
    2dbc:	8d a1       	ldd	r24, Y+37	; 0x25
    2dbe:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9a a3       	std	Y+34, r25	; 0x22
    2dca:	89 a3       	std	Y+33, r24	; 0x21
    2dcc:	89 a1       	ldd	r24, Y+33	; 0x21
    2dce:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd0:	9e 8f       	std	Y+30, r25	; 0x1e
    2dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    2dd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <main+0x10e2>
    2ddc:	9e 8f       	std	Y+30, r25	; 0x1e
    2dde:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(10);
							Eeprom_u8ReadByte(0,11,&Rec_Byte);
    2de0:	9e 01       	movw	r18, r28
    2de2:	2b 53       	subi	r18, 0x3B	; 59
    2de4:	3f 4f       	sbci	r19, 0xFF	; 255
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	6b e0       	ldi	r22, 0x0B	; 11
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	a9 01       	movw	r20, r18
    2dee:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
								LCD_VidSendData(Rec_Byte);
    2df2:	fe 01       	movw	r30, r28
    2df4:	eb 53       	subi	r30, 0x3B	; 59
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 81       	ld	r24, Z
    2dfa:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	a0 e2       	ldi	r26, 0x20	; 32
    2e04:	b1 e4       	ldi	r27, 0x41	; 65
    2e06:	89 8f       	std	Y+25, r24	; 0x19
    2e08:	9a 8f       	std	Y+26, r25	; 0x1a
    2e0a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	4a ef       	ldi	r20, 0xFA	; 250
    2e1c:	54 e4       	ldi	r21, 0x44	; 68
    2e1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	8d 8b       	std	Y+21, r24	; 0x15
    2e28:	9e 8b       	std	Y+22, r25	; 0x16
    2e2a:	af 8b       	std	Y+23, r26	; 0x17
    2e2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e30:	7e 89       	ldd	r23, Y+22	; 0x16
    2e32:	8f 89       	ldd	r24, Y+23	; 0x17
    2e34:	98 8d       	ldd	r25, Y+24	; 0x18
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e8       	ldi	r20, 0x80	; 128
    2e3c:	5f e3       	ldi	r21, 0x3F	; 63
    2e3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e42:	88 23       	and	r24, r24
    2e44:	2c f4       	brge	.+10     	; 0x2e50 <main+0x115a>
		__ticks = 1;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	9c 8b       	std	Y+20, r25	; 0x14
    2e4c:	8b 8b       	std	Y+19, r24	; 0x13
    2e4e:	3f c0       	rjmp	.+126    	; 0x2ece <main+0x11d8>
	else if (__tmp > 65535)
    2e50:	6d 89       	ldd	r22, Y+21	; 0x15
    2e52:	7e 89       	ldd	r23, Y+22	; 0x16
    2e54:	8f 89       	ldd	r24, Y+23	; 0x17
    2e56:	98 8d       	ldd	r25, Y+24	; 0x18
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	3f ef       	ldi	r19, 0xFF	; 255
    2e5c:	4f e7       	ldi	r20, 0x7F	; 127
    2e5e:	57 e4       	ldi	r21, 0x47	; 71
    2e60:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e64:	18 16       	cp	r1, r24
    2e66:	4c f5       	brge	.+82     	; 0x2eba <main+0x11c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e68:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e2       	ldi	r20, 0x20	; 32
    2e76:	51 e4       	ldi	r21, 0x41	; 65
    2e78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	bc 01       	movw	r22, r24
    2e82:	cd 01       	movw	r24, r26
    2e84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	9c 8b       	std	Y+20, r25	; 0x14
    2e8e:	8b 8b       	std	Y+19, r24	; 0x13
    2e90:	0f c0       	rjmp	.+30     	; 0x2eb0 <main+0x11ba>
    2e92:	88 ec       	ldi	r24, 0xC8	; 200
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9a 8b       	std	Y+18, r25	; 0x12
    2e98:	89 8b       	std	Y+17, r24	; 0x11
    2e9a:	89 89       	ldd	r24, Y+17	; 0x11
    2e9c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <main+0x11a8>
    2ea2:	9a 8b       	std	Y+18, r25	; 0x12
    2ea4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	9c 8b       	std	Y+20, r25	; 0x14
    2eae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	69 f7       	brne	.-38     	; 0x2e92 <main+0x119c>
    2eb8:	14 c0       	rjmp	.+40     	; 0x2ee2 <main+0x11ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eba:	6d 89       	ldd	r22, Y+21	; 0x15
    2ebc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ebe:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9c 8b       	std	Y+20, r25	; 0x14
    2ecc:	8b 8b       	std	Y+19, r24	; 0x13
    2ece:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed2:	98 8b       	std	Y+16, r25	; 0x10
    2ed4:	8f 87       	std	Y+15, r24	; 0x0f
    2ed6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed8:	98 89       	ldd	r25, Y+16	; 0x10
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <main+0x11e4>
    2ede:	98 8b       	std	Y+16, r25	; 0x10
    2ee0:	8f 87       	std	Y+15, r24	; 0x0f
								_delay_ms(10);
								Eeprom_u8ReadByte(0,12,&Rec_Byte);
    2ee2:	9e 01       	movw	r18, r28
    2ee4:	2b 53       	subi	r18, 0x3B	; 59
    2ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	6c e0       	ldi	r22, 0x0C	; 12
    2eec:	70 e0       	ldi	r23, 0x00	; 0
    2eee:	a9 01       	movw	r20, r18
    2ef0:	0e 94 15 0a 	call	0x142a	; 0x142a <Eeprom_u8ReadByte>
									LCD_VidSendData(Rec_Byte);
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	eb 53       	subi	r30, 0x3B	; 59
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	80 81       	ld	r24, Z
    2efc:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_VidSendData>
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	a0 e2       	ldi	r26, 0x20	; 32
    2f06:	b1 e4       	ldi	r27, 0x41	; 65
    2f08:	8b 87       	std	Y+11, r24	; 0x0b
    2f0a:	9c 87       	std	Y+12, r25	; 0x0c
    2f0c:	ad 87       	std	Y+13, r26	; 0x0d
    2f0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	4a ef       	ldi	r20, 0xFA	; 250
    2f1e:	54 e4       	ldi	r21, 0x44	; 68
    2f20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	8f 83       	std	Y+7, r24	; 0x07
    2f2a:	98 87       	std	Y+8, r25	; 0x08
    2f2c:	a9 87       	std	Y+9, r26	; 0x09
    2f2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f30:	6f 81       	ldd	r22, Y+7	; 0x07
    2f32:	78 85       	ldd	r23, Y+8	; 0x08
    2f34:	89 85       	ldd	r24, Y+9	; 0x09
    2f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e8       	ldi	r20, 0x80	; 128
    2f3e:	5f e3       	ldi	r21, 0x3F	; 63
    2f40:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f44:	88 23       	and	r24, r24
    2f46:	2c f4       	brge	.+10     	; 0x2f52 <main+0x125c>
		__ticks = 1;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	9e 83       	std	Y+6, r25	; 0x06
    2f4e:	8d 83       	std	Y+5, r24	; 0x05
    2f50:	3f c0       	rjmp	.+126    	; 0x2fd0 <main+0x12da>
	else if (__tmp > 65535)
    2f52:	6f 81       	ldd	r22, Y+7	; 0x07
    2f54:	78 85       	ldd	r23, Y+8	; 0x08
    2f56:	89 85       	ldd	r24, Y+9	; 0x09
    2f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	3f ef       	ldi	r19, 0xFF	; 255
    2f5e:	4f e7       	ldi	r20, 0x7F	; 127
    2f60:	57 e4       	ldi	r21, 0x47	; 71
    2f62:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f66:	18 16       	cp	r1, r24
    2f68:	4c f5       	brge	.+82     	; 0x2fbc <main+0x12c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e2       	ldi	r20, 0x20	; 32
    2f78:	51 e4       	ldi	r21, 0x41	; 65
    2f7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	bc 01       	movw	r22, r24
    2f84:	cd 01       	movw	r24, r26
    2f86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	9e 83       	std	Y+6, r25	; 0x06
    2f90:	8d 83       	std	Y+5, r24	; 0x05
    2f92:	0f c0       	rjmp	.+30     	; 0x2fb2 <main+0x12bc>
    2f94:	88 ec       	ldi	r24, 0xC8	; 200
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	9c 83       	std	Y+4, r25	; 0x04
    2f9a:	8b 83       	std	Y+3, r24	; 0x03
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <main+0x12aa>
    2fa4:	9c 83       	std	Y+4, r25	; 0x04
    2fa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	00 97       	sbiw	r24, 0x00	; 0
    2fb8:	69 f7       	brne	.-38     	; 0x2f94 <main+0x129e>
    2fba:	14 c0       	rjmp	.+40     	; 0x2fe4 <main+0x12ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fbe:	78 85       	ldd	r23, Y+8	; 0x08
    2fc0:	89 85       	ldd	r24, Y+9	; 0x09
    2fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	9e 83       	std	Y+6, r25	; 0x06
    2fce:	8d 83       	std	Y+5, r24	; 0x05
    2fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd4:	9a 83       	std	Y+2, r25	; 0x02
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	9a 81       	ldd	r25, Y+2	; 0x02
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	f1 f7       	brne	.-4      	; 0x2fdc <main+0x12e6>
    2fe0:	9a 83       	std	Y+2, r25	; 0x02
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	ff cf       	rjmp	.-2      	; 0x2fe4 <main+0x12ee>

00002fe6 <__udivmodhi4>:
    2fe6:	aa 1b       	sub	r26, r26
    2fe8:	bb 1b       	sub	r27, r27
    2fea:	51 e1       	ldi	r21, 0x11	; 17
    2fec:	07 c0       	rjmp	.+14     	; 0x2ffc <__udivmodhi4_ep>

00002fee <__udivmodhi4_loop>:
    2fee:	aa 1f       	adc	r26, r26
    2ff0:	bb 1f       	adc	r27, r27
    2ff2:	a6 17       	cp	r26, r22
    2ff4:	b7 07       	cpc	r27, r23
    2ff6:	10 f0       	brcs	.+4      	; 0x2ffc <__udivmodhi4_ep>
    2ff8:	a6 1b       	sub	r26, r22
    2ffa:	b7 0b       	sbc	r27, r23

00002ffc <__udivmodhi4_ep>:
    2ffc:	88 1f       	adc	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	5a 95       	dec	r21
    3002:	a9 f7       	brne	.-22     	; 0x2fee <__udivmodhi4_loop>
    3004:	80 95       	com	r24
    3006:	90 95       	com	r25
    3008:	bc 01       	movw	r22, r24
    300a:	cd 01       	movw	r24, r26
    300c:	08 95       	ret

0000300e <__prologue_saves__>:
    300e:	2f 92       	push	r2
    3010:	3f 92       	push	r3
    3012:	4f 92       	push	r4
    3014:	5f 92       	push	r5
    3016:	6f 92       	push	r6
    3018:	7f 92       	push	r7
    301a:	8f 92       	push	r8
    301c:	9f 92       	push	r9
    301e:	af 92       	push	r10
    3020:	bf 92       	push	r11
    3022:	cf 92       	push	r12
    3024:	df 92       	push	r13
    3026:	ef 92       	push	r14
    3028:	ff 92       	push	r15
    302a:	0f 93       	push	r16
    302c:	1f 93       	push	r17
    302e:	cf 93       	push	r28
    3030:	df 93       	push	r29
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
    3036:	ca 1b       	sub	r28, r26
    3038:	db 0b       	sbc	r29, r27
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	09 94       	ijmp

00003046 <__epilogue_restores__>:
    3046:	2a 88       	ldd	r2, Y+18	; 0x12
    3048:	39 88       	ldd	r3, Y+17	; 0x11
    304a:	48 88       	ldd	r4, Y+16	; 0x10
    304c:	5f 84       	ldd	r5, Y+15	; 0x0f
    304e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3050:	7d 84       	ldd	r7, Y+13	; 0x0d
    3052:	8c 84       	ldd	r8, Y+12	; 0x0c
    3054:	9b 84       	ldd	r9, Y+11	; 0x0b
    3056:	aa 84       	ldd	r10, Y+10	; 0x0a
    3058:	b9 84       	ldd	r11, Y+9	; 0x09
    305a:	c8 84       	ldd	r12, Y+8	; 0x08
    305c:	df 80       	ldd	r13, Y+7	; 0x07
    305e:	ee 80       	ldd	r14, Y+6	; 0x06
    3060:	fd 80       	ldd	r15, Y+5	; 0x05
    3062:	0c 81       	ldd	r16, Y+4	; 0x04
    3064:	1b 81       	ldd	r17, Y+3	; 0x03
    3066:	aa 81       	ldd	r26, Y+2	; 0x02
    3068:	b9 81       	ldd	r27, Y+1	; 0x01
    306a:	ce 0f       	add	r28, r30
    306c:	d1 1d       	adc	r29, r1
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	ed 01       	movw	r28, r26
    307a:	08 95       	ret

0000307c <_exit>:
    307c:	f8 94       	cli

0000307e <__stop_program>:
    307e:	ff cf       	rjmp	.-2      	; 0x307e <__stop_program>
